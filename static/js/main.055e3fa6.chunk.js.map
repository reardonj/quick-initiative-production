{"version":3,"sources":["Components/InitSelector.tsx","Model/CombatState.ts","Model/InitiativeEntries.ts","Core/EventHandlers.tsx","Model/InitModel.ts","Model/HistoryEntries.ts","Model/HistoryModel.ts","Components/HistoryItem.tsx","Core/StringUtils.ts","Components/GroupCreator.tsx","Components/FilteringPanel.tsx","Components/CombatStatusBar.tsx","Components/InitRow.tsx","Components/InitList.tsx","Components/NextInitButton.tsx","Components/InfoDropdown.tsx","Components/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["inits","withStyles","theme","button","margin","spacing","props","classes","disabled","onSelected","_useState","useState","_useState2","Object","slicedToArray","anchor","setAnchor","react_default","a","createElement","IconButton","onClick","event","currentTarget","className","aria-label","PlaylistAdd","Menu","id","anchorEl","open","Boolean","onClose","map","option","index","MenuItem","dense","key","handleMenuItemClick","CurrentCombatState","round","activeItem","classCallCheck","this","createClass","value","itemsInRound","nextActiveItem","nextRound","NotStarted","InitiativeEntry","name","init","active","canMoveDown","canMoveUp","isActive","totalItems","defineEvent","state","handlerList","fire","x","useEvents","currState","setCurrState","handler","y","useEffect","push","handlers","i","length","splice","unsubscribe","combatState","fireCombatStateEvents","useCombatStateEvents","nextInitId","initiativeItems","initiativeItemLookup","slice","entry","fireInitEntryEvents","useInitEntryListEvents","initIndexToEntry","addInitEntry","addInitAtIndex","findAddIndex","itemIndex","item","updateSurroundingMovement","removeInitEntry","findIndex","Error","Math","min","newActiveIndex","max","newActiveItem","updateActive","swapInits","index1","index2","originalEntry","firstEvent","updateMovementForIndex","secondEvent","updateMovement","info","HistoryEntry","groups","Set","defaultHistoryEntrySort","b","localeCompare","getHistoryItems","fireHistoryEntryListEvents","useHistoryItemListEvents","historyItems","Map","Array","from","values","addHistoryItem","has","forEach","group","add","set","get","saveToLocalStorage","localStorage","setItem","JSON","stringify","filter","storedItems","getItem","parse","element","input","HistoryModel","ListItem","showInit","delete","ListItemText","primary","ListItemSecondaryAction","Delete","Components_InitSelector","InitModel","Fragment","isNullOrEmpty","str","match","inputEl","useRef","isCreateGroupButtonDisabled","setSelectorDisabled","_useState3","_useState4","nameText","setNameText","Input","inputRef","placeholder","onChange","inputProps","oldName","newName","LibraryAdd","historyList","overflow","height","filteringBar","isSelectorDisabled","filterText","setFilterText","filteredList","useMemo","toLocaleLowerCase","includes","hasText","entryHasText","sort","pendingGroup","others","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","toAdd","_iterator","Symbol","iterator","next","done","err","return","List","current","Divider","Components_GroupCreator","Components_HistoryItem","ListSubheader","disableSticky","label","Typography","variant","color","noWrap","duplicates","initCell","width","align","padding","titleCell","actionCell","hpControls","marginRight","alignSelf","hp","setHp","times","TableRow","selected","TableCell","style","display","e","ArrowUpward","ArrowDownward","Grid","alignItems","ButtonGroup","Button","FileCopy","root","backgroundColor","palette","background","paper","initItems","Table","TableBody","Components_InitRow","fabBox","position","bottom","right","fab","marginLeft","noInitItems","Fab","DeleteSweep","lastItem","nextItem","firstEntry","PlayArrowOutlined","actions","icon","Home","url","Code","speedDial","top","_React$useState","React","_React$useState2","setOpen","handleClick","prevOpen","handleOpen","handleClose","SpeedDial","ariaLabel","SpeedDialIcon","InfoOutlined","openIcon","onBlur","onFocus","onMouseEnter","onMouseLeave","direction","action","SpeedDialAction","tooltipTitle","window","appBar","zIndex","drawer","flexShrink","drawerPaper","content","flexGrow","toolbar","mixins","grow","CssBaseline","AppBar","Toolbar","Components_CombatStatusBar","Components_InfoDropdown","Drawer","Components_FilteringPanel","Components_InitList","Components_NextInitButton","App","Components_MainView","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAWMA,EAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAiDnGC,kBAvDA,SAACC,GAAD,MAAiB,CAC5BC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,MAqDbJ,CA/Cf,SAAsBK,GAA6E,IACvFC,EAAkCD,EAAlCC,QAASC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WADoEC,EAGnEC,mBAA2B,MAHwCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGxFK,EAHwFH,EAAA,GAGhFI,EAHgFJ,EAAA,GAkB/F,OACIK,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,QAhBc,SAACC,GACvBN,EAAUM,EAAMC,gBAgBRC,UAAWjB,EAAQJ,OACnBK,SAAUA,EACViB,aAAW,qBAEXR,EAAAC,EAAAC,cAACO,EAAA,EAAD,OAEJT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIC,GAAG,YACHC,SAAUd,EACVe,KAAMC,QAAQhB,GACdiB,QAlBQ,WAChBhB,EAAU,QAmBLhB,EAAMiC,IAAI,SAACC,EAAQC,GAAT,OACPlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACIC,OAAO,EACPC,IAAKJ,EACLb,QAAS,SAAAC,GAAK,OA7BF,SAACA,EAAiBa,GAC1CnB,EAAU,MACVP,EAAWT,EAAMmC,IA2BaI,CAAoBjB,EAAOa,KAEhDD,yBCjDJM,EAAb,WAII,SAAAA,EAAqBC,EAAwBC,GAAqB7B,OAAA8B,EAAA,EAAA9B,CAAA+B,KAAAJ,GAAAI,KAA7CH,QAA4CG,KAApBF,aAJjD,OAAA7B,OAAAgC,EAAA,EAAAhC,CAAA2B,EAAA,EAAAF,IAAA,OAAAQ,MAAA,SAMSC,GACD,IAAMC,GAAkBJ,KAAKF,WAAa,GAAKK,EAC3CE,EAAYL,KAAKH,MAIrB,OAHGO,GAAkBJ,KAAKF,YACtBO,IAEG,IAAIT,EAAmBS,EAAWD,OAZjDR,EAAA,GAiBaU,EAA2B,aClB3BC,EAAb,WACI,SAAAA,EACaC,EACAC,EACAzB,EACA0B,EACAC,EACAC,GAAqB3C,OAAA8B,EAAA,EAAA9B,CAAA+B,KAAAO,GAAAP,KALrBQ,OAKoBR,KAJpBS,OAIoBT,KAHpBhB,KAGoBgB,KAFpBU,SAEoBV,KADpBW,cACoBX,KAApBY,YAPjB,OAAA3C,OAAAgC,EAAA,EAAAhC,CAAAsC,EAAA,EAAAb,IAAA,eAAAQ,MAAA,SAaiBW,GACT,OAAO,IAAIN,EAAgBP,KAAKQ,KAAMR,KAAKS,KAAMT,KAAKhB,GAAI6B,EAAUb,KAAKW,YAAaX,KAAKY,aAdnG,CAAAlB,IAAA,iBAAAQ,MAAA,SAsBmBX,EAAeuB,GAC1B,IAAMH,EAAcpB,EAAQuB,EAAa,EACnCF,EAAYrB,EAAQ,EAC1B,OAAO,IAAIgB,EAAgBP,KAAKQ,KAAMR,KAAKS,KAAMT,KAAKhB,GAAIgB,KAAKU,OAAQC,EAAaC,OAzB5FL,EAAA,GCiCO,SAASQ,EAAeC,GAE3B,IAAIC,EAA4B,GAEhC,MAAO,CACHC,KAAM,kBAAMD,EAAY5B,IAAI,SAAA8B,GAAC,OAAIA,EAAEH,QACnCI,UAAW,SAACD,GAAkB,IAAArD,EACQC,mBAASiD,GADjBhD,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBuD,EADmBrD,EAAA,GACRsD,EADQtD,EAAA,GAIpBuD,EAAU,SAACC,GACbF,EAAaE,GACbL,EAAEK,IAQN,OAJAC,oBAAU,WAEN,OADAR,EAAYS,KAAKH,GACV,kBAOvB,SAAwBI,EAAeJ,GACnC,IAAK,IAAIK,EAAID,EAASE,OAAS,EAAGD,GAAK,EAAGA,IAClCD,EAASC,KAAOL,GAChBI,EAASG,OAAOF,EAAG,GAVFG,CAAYd,EAAaM,MAEnCF,ICtBnB,IAAIW,EAAc1B,IACuDS,EAAY,kBAAMiB,IAA7EC,IAANf,KAAwCgB,IAAXd,UAkBrC,IAAIe,EAAa,EACXC,EAA4B,GAC5BC,EAAyD,KACUtB,EAMzE,WACI,OAAOqB,EAAgBE,QAAQjD,IAAI,SAAA8B,GAAC,OAAIkB,EAAqBlB,GAAGoB,UAPtDC,IAANtB,KAAsCuB,IAAXrB,UAUnC,SAASsB,EAAiBd,GACtB,OAAOS,EAAqBD,EAAgBR,IAGhD,SAASe,EAAanC,EAAcC,GAEhCmC,EAAepC,EAAMC,EA2BzB,SAAsBA,GAClB,IAAK,IAAImB,EAAI,EAAGA,EAAIQ,EAAgBP,OAAQD,IACxC,GAAIc,EAAiBd,GAAGW,MAAM9B,KAAOA,EACjC,OAAOmB,EAIf,OAAOQ,EAAgBP,OAnCPgB,CAAapC,IAIjC,SAASmC,EAAepC,EAAcC,EAAcqC,GAChD,IAAM9D,EAAKmD,IACPY,EAAO,IAAIxC,EAAgBC,EAAMC,EAAMzB,GAAI,GAAO,GAAO,GAC7DoD,EAAgBN,OAAOgB,EAAW,EAAGC,EAAK/D,IAGtCgD,aAAuBpC,GAAsBoC,EAAYlC,YAAcgD,IACvEd,EAAc,IAAIpC,EAAmBoC,EAAYnC,MAAOmC,EAAYlC,WAAa,GACjFmC,KAEJI,EAAqBU,EAAK/D,IAAM,CAC5BuD,MAAOQ,EACPpB,SAAUZ,EAAY,kBAAMsB,EAAqBU,EAAK/D,IAAIuD,SAE9DS,EAA0BF,GAC1BN,IAqCJ,SAASS,EAAgBV,GACrB,IAAMhD,EAAQ6C,EAAgBc,UAAU,SAAA/B,GAAC,OAAIA,IAAMoB,EAAMvD,KACzD,IAAe,IAAXO,EACA,MAAM,IAAI4D,MAAM,2DAA6DZ,EAAMvD,IAQvF,GANAoD,EAAgBN,OAAOvC,EAAO,UACvB8C,EAAqBE,EAAMvD,IAClCwD,IACAQ,EAA0BI,KAAKC,IAAI9D,EAAO6C,EAAgBP,OAAS,IAG/DG,aAAuBpC,EAAoB,CAC3C,GAA+B,IAA3BwC,EAAgBP,OAEhBG,EAAc1B,OACX,GAAIf,GAASyC,EAAYlC,WAAY,CAExC,IAAMwD,EAAiBF,KAAKG,IAAI,EAAGvB,EAAYlC,WAAa,GAI5D,GAHAkC,EAAc,IAAIpC,EAAmBoC,EAAYnC,MAAOyD,GAGpDf,EAAM7B,OAAQ,CACd,IAAM8C,EAAgBd,EAAiBY,GACvCG,EAAaD,GAAe,GAC5BA,EAAc7B,SAAST,QAG/Be,KAsCR,SAASyB,EAAUC,EAAgBC,GAC/B,IAAIC,EAAgBzB,EAAgBuB,GACpCvB,EAAgBuB,GAAUvB,EAAgBwB,GAC1CxB,EAAgBwB,GAAUC,EAE1B,IAAMC,EAAaC,EAAuBJ,GACpCK,EAAcD,EAAuBH,GAEvC5B,aAAuBpC,IACnB+D,IAAW3B,EAAYlC,YACvBkC,EAAc,IAAIpC,EAAmBoC,EAAYnC,MAAO+D,GACxD3B,KACO2B,IAAW5B,EAAYlC,aAC9BkC,EAAc,IAAIpC,EAAmBoC,EAAYnC,MAAO8D,GACxD1B,MAGRO,IACAsB,IACAE,IAGJ,SAASD,EAAuBxE,GAC5B,IAAMgD,EAAQG,EAAiBnD,GAE/B,OADAgD,EAAMA,MAAQA,EAAMA,MAAM0B,eAAe1E,EAAO6C,EAAgBP,QACzDU,EAAMZ,SAAST,KAO1B,SAAS8B,EAA0BzD,GAC3BA,GAAS6C,EAAgBP,QAAUtC,EAAQ,IAI/CwE,EAAuBxE,EAAvBwE,GACIxE,EAAQ,GACRwE,EAAuBxE,EAAQ,EAA/BwE,GAEAxE,EAAQ6C,EAAgBP,OAAS,GACjCkC,EAAuBxE,EAAQ,EAA/BwE,IAoBR,SAASN,EAAaS,EAAsBrD,GACxCwB,EAAqB6B,EAAK3B,MAAMvD,IAAIuD,MAAQ2B,EAAK3B,MAAMkB,aAAa5C,GC5PjE,IAAMsD,EAIT,SAAAA,EAAqB3D,GAAevC,OAAA8B,EAAA,EAAA9B,CAAA+B,KAAAmE,GAAAnE,KAAfQ,OAAcR,KAFnCoE,YAEmC,EAC/BpE,KAAKoE,OAAS,IAAIC,KAOnB,SAASC,EAAwBhG,EAAiBiG,GACrD,OAAOjG,EAAEkC,KAAKgE,cAAcD,EAAE/D,YCJ9BO,EAAY0D,IAFNC,KAANxD,KACWyD,KAAXvD,UAiBEwD,GAA8F,IAAIC,IAExG,SAASJ,KACL,OAAOK,MAAMC,KAAKH,GAAaI,SAAU,SAAA7D,GAAC,OAAIA,EAAEoB,QAsBpD,SAAS0C,GAAezE,EAAc4D,GAClC,GAAIQ,GAAaM,IAAI1E,GACjB,OAAO,EAGX,IAAM+B,EAAQ,IAAI4B,EAAa3D,GAiB/B,OAhBA4D,EAAOe,QAAQ,SAAAC,GACX7C,EAAM6B,OAAOiB,IAAID,KAGrBR,GAAaU,IAAI9E,EACb,CACI+B,MAAOA,EACPZ,SAAUZ,EAAY,WAClB,IAAIgC,EAAO6B,GAAaW,IAAI/E,GAC5B,GAAIuC,EACA,OAAOA,EAAKR,MAEhB,MAAM,IAAIY,MAAM,6BAG5BuB,MACO,EA0CX,SAASc,KACLC,aAAaC,QAAQ,eACjBC,KAAKC,UAAUnB,KAAkBpF,IAAI,SAAC8B,GAAD,MAChC,CAAEX,KAAMW,EAAEX,KAAM4D,OAAQU,MAAMC,KAAK5D,EAAEiD,QAAQyB,OAAO,SAAA1E,GAAC,OAAIA,EAAEU,OAAS,SAIjF,IAAMiE,GAAcL,aAAaM,QAAQ,gBACrCD,IACmBH,KAAKK,MAAMF,IACnBX,QAAQ,SAACc,GAChBhB,GAAegB,EAAQzF,KAAMyF,EAAQ7B,wBCjF9B/G,mBAvCA,SAACC,GAAD,MAAiB,CAC5B4I,MAAO,CACH1I,OAAQF,EAAMG,QAAQ,MAqCfJ,CAjCf,SAAqBK,GACjB,IAAMqF,EDwBV,SAA8BvC,EAAce,GACxC,IAAIwB,EAAO6B,GAAaW,IAAI/E,GAC5B,IAAKuC,EACD,MAAM,IAAII,MAAM,+CAEpB,OAAOJ,EAAKpB,SAASP,UAAUG,GC7BlB4E,CAAkCzI,EAAMqF,KAAKvC,KAAM,cAchE,OACInC,EAAAC,EAAAC,cAAC6H,EAAA,EAAD,CAAU3G,OAAK,EAAClC,QAAM,EAACkB,QATP,WACbsE,EAAKqB,OAAOc,IAAI,MAAQxH,EAAM2I,SDyEzC,SAAoCtD,EAAoBqC,GACpD,IAAM7C,EAAQqC,GAAaW,IAAIxC,EAAKvC,MACpC,IAAI+B,EACA,MAAM,IAAIY,MAAM,yBAGjBZ,EAAMA,MAAM6B,OAAOkC,OAAOlB,KACzB7C,EAAMZ,SAAST,OACfwD,MChFIyB,CAAwCpD,EAAM,ID6D1D,SAA+BA,EAAoBqC,GAC/C,IAAM7C,EAAQqC,GAAaW,IAAIxC,EAAKvC,MACpC,IAAI+B,EACA,MAAM,IAAIY,MAAM,yBAGpBZ,EAAMA,MAAM6B,OAAOiB,IAAID,GACvB7C,EAAMZ,SAAST,OACfwD,KCnEQyB,CAAmCpD,EAAM,MAMzC1E,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAcC,QAASzD,EAAKvC,OAExB9C,EAAM2I,SACFhI,EAAAC,EAAAC,cAACkI,EAAA,EAAD,KACIpI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,QAAS,kBD2C7C,SAA2BsE,GACpB6B,GAAa0B,OAAOvD,EAAKvC,OACxBkE,KC7C2CyB,CAA+BpD,KACtD1E,EAAAC,EAAAC,cAACmI,GAAA,EAAD,OAEJrI,EAAAC,EAAAC,cAACoI,EAAD,CAAc/I,UAAU,EAAOC,WArBxB,SAAC4C,GACxBmG,EAAuB7D,EAAKvC,KAAMC,OAuBtBpC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuI,SAAA,SCpCb,SAASC,GAAcC,GAC1B,OAAe,OAARA,GAAsC,OAAtBA,EAAIC,MAAM,sBC2CtB3J,mBA3CA,SAACC,GAAD,MAAiB,CAC5B4I,MAAO,CACH1I,OAAQF,EAAMG,QAAQ,MAyCfJ,CArCf,SAAsBK,GAAyB,IACnCC,EAAYD,EAAZC,QAEFsJ,EAAUC,iBAAyB,MAHEpJ,EAIgBC,oBAAS,GAJzBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIpCqJ,EAJoCnJ,EAAA,GAIPoJ,EAJOpJ,EAAA,GAAAqJ,EAKXtJ,mBAAS,IALEuJ,EAAArJ,OAAAC,EAAA,EAAAD,CAAAoJ,EAAA,GAKpCE,EALoCD,EAAA,GAK1BE,EAL0BF,EAAA,GAgB3C,OACIjJ,EAAAC,EAAAC,cAAC6H,EAAA,EAAD,KACI/H,EAAAC,EAAAC,cAACgI,EAAA,EAAD,KACIlI,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CACIC,SAAUT,EACVU,YAAY,aACZC,SAfS,SAAClJ,GACtB0I,EAAoBN,GAAcpI,EAAMC,cAAcuB,QACtDsH,EAAY9I,EAAMC,cAAcuB,QAcpB2H,WAAY,CACRhJ,aAAc,iBAG1BR,EAAAC,EAAAC,cAACkI,EAAA,EAAD,KACIpI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYI,UAAWjB,EAAQuI,MACnBtI,SAAUuJ,EAA6B1I,QAjB3C,WHmFxB,IAAqBqJ,EAAiBC,EAAjBD,EGlFY,GHkFKC,EGlFDR,EHmFjC3C,GAAaO,QAAQ,SAAApC,GACdA,EAAKR,MAAM6B,OAAOkC,OAAOwB,KACxB/E,EAAKR,MAAM6B,OAAOiB,IAAI0C,GACtBhF,EAAKpB,SAAST,UAGtBwD,OGxEgBrG,EAAAC,EAAAC,cAACyJ,GAAA,EAAD,WC6GL3K,mBA7IA,iBAAO,CAClB6I,MAAO,GAEP+B,YAAa,CACTC,SAAU,SACVC,OAAQ,qBAEZC,aAAc,CACVF,SAAU,YAqIH7K,CA5Gf,SAAwBK,GAAyB,IACrCC,EAAYD,EAAZC,QAEFsJ,EAAUC,iBAAyB,MAHIpJ,EAIKC,oBAAS,GAJdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAItCuK,EAJsCrK,EAAA,GAIlBoJ,EAJkBpJ,EAAA,GAAAqJ,EAKTtJ,mBAAS,IALAuJ,EAAArJ,OAAAC,EAAA,EAAAD,CAAAoJ,EAAA,GAKtCiB,EALsChB,EAAA,GAK1BiB,EAL0BjB,EAAA,GAOvCW,EAAc9B,GAAsCA,IAEpDqC,EAAeC,kBACjB,kBAAMR,EAAYpC,OAAO,SAAA1E,GAAC,OAzBlC,SAAsB4B,EAAoBuF,GACtC,GAAGvF,EAAKvC,KAAKkI,oBAAoBC,SAASL,EAAWI,qBACjD,OAAO,EAGX,IAAIE,GAAU,EAOd,OANA7F,EAAKqB,OAAOe,QAAQ,SAAAhE,GACbA,EAAEuH,oBAAoBC,SAASL,EAAWI,uBACzCE,GAAU,KAIXA,EAa2BC,CAAa1H,EAAGmH,KAAaQ,KAAKxE,IAChE,CAAC2D,EAAaK,IAGZS,EAAed,EAAYpC,OAAO,SAAA1E,GAAC,OAAIA,EAAEiD,OAAOc,IAAI,MAGpD8D,EAASR,EAAa3C,OAAO,SAAA1E,GAAC,OAAsB,IAAlBA,EAAEiD,OAAO6E,OAG3C7E,EAAS,IAAIS,IApB0BqE,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAqB7C,IArB6C,IAqB7CC,EArB6CC,EAAA,eAqBnCxG,EArBmCuG,EAAApJ,MAsBzC6C,EAAKqB,OAAOe,QAAQ,SAAAC,GAChB,IAAG0B,GAAc1B,GAAjB,CAIA,IAAMoE,EAAQpF,EAAOmB,IAAIH,QACXiE,IAAVG,GACApF,EAAOkB,IAAIF,EAAO,IAGtBoE,EAAM9H,KAAKqB,OAXnB0G,EAAkBjB,EAAlBkB,OAAAC,cAAAT,GAAAI,EAAAG,EAAAG,QAAAC,MAAAX,GAAA,EAAgCK,IArBa,MAAAO,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAO,EAAAM,QAAAN,EAAAM,SAAA,WAAAZ,EAAA,MAAAC,GAoD7C,OACI/K,EAAAC,EAAAC,cAAA,OAAKK,UAAWjB,EAAQyK,cACpB/J,EAAAC,EAAAC,cAACyL,EAAA,EAAD,KACI3L,EAAAC,EAAAC,cAAC6H,EAAA,EAAD,KACI/H,EAAAC,EAAAC,cAACgI,EAAA,EAAD,KACIlI,EAAAC,EAAAC,cAACkJ,EAAA,EAAD,CACIC,SAAUT,EACVU,YAAY,OACZC,SAxBC,SAAClJ,GACtB0I,EAAoBN,GAAcpI,EAAMC,cAAcuB,QACtDqI,EAAc7J,EAAMC,cAAcuB,QAuBdtB,UAAWjB,EAAQuI,MACnB2B,WAAY,CACRhJ,aAAc,WAG1BR,EAAAC,EAAAC,cAACkI,EAAA,EAAD,KACIpI,EAAAC,EAAAC,cAACoI,EAAD,CAAc/I,SAAUyK,EAAoBxK,WA1BrC,SAAC4C,GACD,MAAnBwG,EAAQgD,UAGZrD,EAAuBK,EAAQgD,QAAQ/J,MAAOO,GAC9C0F,GAA4Bc,EAAQgD,QAAQ/J,MAAO,CAAC,KACpD+G,EAAQgD,QAAQ/J,MAAQ,GACxBkH,GAAoB,GACpBmB,EAAc,WAsBVlK,EAAAC,EAAAC,cAAC2L,EAAA,EAAD,MAEInB,EAAalH,OAAS,EAClBxD,EAAAC,EAAAC,cAACyL,EAAA,EAAD,KACI3L,EAAAC,EAAAC,cAAC4L,GAAD,MACCpB,EAAa1J,IACV,SAAA8B,GAAC,OAAI9C,EAAAC,EAAAC,cAAC6L,GAAD,CAAa1K,IAAKyB,EAAEX,KAAMuC,KAAM5B,EAAGkF,UAAU,MAEtDhI,EAAAC,EAAAC,cAAC2L,EAAA,EAAD,OAGJ7L,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuI,SAAA,MAERxI,EAAAC,EAAAC,cAAA,OAAKK,UAAWjB,EAAQsK,aAEhBnD,MAAMC,KAAKX,GAAQ0E,KAAK,SAACxK,EAAEiG,GAAH,OAAQjG,EAAE,GAAGkG,cAAcD,EAAE,MAAKlF,IAAI,SAAAkD,GAAK,OAC/DlE,EAAAC,EAAAC,cAACyL,EAAA,EAAD,KACI3L,EAAAC,EAAAC,cAAC8L,EAAA,EAAD,CAAeC,eAAe,GAAO/H,EAAM,IACzCA,EAAM,GAAsBlD,IAC1B,SAAA8B,GAAC,OAAI9C,EAAAC,EAAAC,cAAC6L,GAAD,CAAa1K,IAAKyB,EAAEX,KAAMuC,KAAM5B,EAAGkF,UAAU,SAK9D2C,EAAOnH,OAAS,EACZxD,EAAAC,EAAAC,cAACyL,EAAA,EAAD,KACI3L,EAAAC,EAAAC,cAAC8L,EAAA,EAAD,CAAeC,eAAe,GAA9B,UACCtB,EAAO3J,IAAI,SAAA8B,GAAC,OAAI9C,EAAAC,EAAAC,cAAC6L,GAAD,CAAa1K,IAAKyB,EAAEX,KAAMuC,KAAM5B,EAAGkF,UAAU,OAGlEhI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuI,SAAA,UCpHTxJ,mBAvBA,SAACC,GAAD,MAAiB,CAC5BiN,MAAO,CACL/M,OAAQF,EAAMG,QAAQ,MAqBbJ,CAjBf,SAAyBK,GAAY,IACzBC,EAAYD,EAAZC,QAEFqE,EAAc4E,EAA+B,cAEnD,OAAI5E,aAAuBpC,EAEnBvB,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,UAAUC,QAAM,EAAC/L,UAAWjB,EAAQ4M,OAAtE,SACOvI,EAAYnC,OAKpBxB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuI,SAAA,4GCEL+D,GAAa,CAAC,EAAG,EAAG,EAAG,GAgGdvN,mBAlHA,SAACC,GAAD,MAAiB,CAC5BuN,SAAU,CACNC,MAAO,OACPC,MAAO,QACPC,QAAS,YAEbC,UAAW,CACPH,MAAO,QAEXI,WAAY,CACRJ,MAAO,QAEXK,WAAY,CACRC,YAAa9N,EAAMG,QAAQ,GAC3B4N,UAAW,YAoGJhO,CA9Ff,SAAiBK,GAAgD,IR8BrCsB,EAAYuC,EQ7B5B5D,EAAYD,EAAZC,QADqDG,EAEzCC,mBAAS,GAFgCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEtDwN,EAFsDtN,EAAA,GAElDuN,EAFkDvN,EAAA,GAGvD+E,GR2BkB/D,EQ3BkBtB,EAAMqF,KAAK/D,GR2BjBuC,EQ3BqB,aR4BlDc,EAAqBrD,GAAI2C,SAASP,UAAUG,IQ/BU8F,EAIjCtJ,mBAA6B,MAJIuJ,EAAArJ,OAAAC,EAAA,EAAAD,CAAAoJ,EAAA,GAItDlJ,EAJsDmJ,EAAA,GAI9ClJ,EAJ8CkJ,EAAA,GAUvD3H,EAAsB,SAACjB,EAAiBa,GAC1CnB,EAAU,MR4ElB,SAA4B2E,EAAuByI,GAG/C,IAFA,IAAMjM,EAAQ6C,EAAgBc,UAAU,SAAA/B,GAAC,OAAIA,IAAM4B,EAAK/D,KAClDkF,EAAO7B,EAAqBD,EAAgB7C,IACzCqC,EAAI,EAAGA,EAAI4J,EAAO5J,IAEvBgB,EADWsB,EAAK3B,MAAM/B,KAAO,MAAQoB,EAAI,GAAK,IACzBsC,EAAK3B,MAAM9B,KAAMlB,EAAQ,EAAIqC,GAEtDsC,EAAK3B,MAAQ,IAAIhC,EAAgB2D,EAAK3B,MAAM/B,KAAO,OAC/C0D,EAAK3B,MAAM9B,KAAMyD,EAAK3B,MAAMvD,GAAIkF,EAAK3B,MAAM7B,OAAQwD,EAAK3B,MAAM5B,YAAauD,EAAK3B,MAAM3B,WAC1FsD,EAAKvC,SAAST,OQpFV0F,CAA6B7D,EAAM6H,GAAWrL,GAAO,IAQzD,OACIlB,EAAAC,EAAAC,cAACkN,GAAA,EAAD,CAAUC,SAAU3I,EAAKrC,QACrBrC,EAAAC,EAAAC,cAACoN,GAAA,EAAD,CAAW/M,UAAWjB,EAAQuN,WAAYF,QAAQ,YAC9C3M,EAAAC,EAAAC,cAAA,OAAKqN,MAAO,CAAEC,QAAS,SACnBxN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,QAAS,SAAAqN,GAAC,ORwH1C,SAAyBvJ,GACrB,IAAMhD,EAAQ6C,EAAgBc,UAAU,SAAA/B,GAAC,OAAIA,IAAMoB,EAAMvD,KACzD,IAAe,IAAXO,EACA,MAAM,IAAI4D,MAAM,yDAA2DZ,EAAMvD,IAIvE,IAAVO,GAIJmE,EAAUnE,EAAOA,EAAQ,GQnIiBqH,CAA0B7D,IAAOnF,UAAWmF,EAAKnC,WACvEvC,EAAAC,EAAAC,cAACwN,GAAA,EAAD,OAEJ1N,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,QAAS,SAAAqN,GAAC,ORuG1C,SAA2BvJ,GACvB,IAAMhD,EAAQ6C,EAAgBc,UAAU,SAAA/B,GAAC,OAAIA,IAAMoB,EAAMvD,KACzD,IAAe,IAAXO,EACA,MAAM,IAAI4D,MAAM,yDAA2DZ,EAAMvD,IAIjFO,IAAU6C,EAAgBP,OAAS,GAIvC6B,EAAUnE,EAAOA,EAAQ,GQlHiBqH,CAA4B7D,IAAOnF,UAAWmF,EAAKpC,aACzEtC,EAAAC,EAAAC,cAACyN,GAAA,EAAD,SAIZ3N,EAAAC,EAAAC,cAACoN,GAAA,EAAD,CAAW/M,UAAWjB,EAAQkN,UAAW9H,EAAKtC,MAC9CpC,EAAAC,EAAAC,cAACoN,GAAA,EAAD,CAAW/M,UAAWjB,EAAQsN,WAC1B5M,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAAYC,QAAQ,aAAa1H,EAAKvC,OAE1CnC,EAAAC,EAAAC,cAACoN,GAAA,EAAD,CAAW/M,UAAWjB,EAAQuN,WAAYF,QAAQ,YAC9C3M,EAAAC,EAAAC,cAAA,OAAKqN,MAAO,CAAEC,QAAS,SACnBxN,EAAAC,EAAAC,cAAC0N,GAAA,EAAD,CAAMlJ,MAAI,EACJmJ,WAAW,SACXN,MAAO,CAAEP,UAAW,WACtBhN,EAAAC,EAAAC,cAAC4N,GAAA,EAAD,CAAazB,MAAM,UAAUD,QAAQ,WAAWxB,KAAK,SACjD5K,EAAAC,EAAAC,cAAC6N,GAAA,EAAD,CAAQ3N,QAAS,kBAAM8M,EAAMD,EAAK,MAAlC,OACAjN,EAAAC,EAAAC,cAAC6N,GAAA,EAAD,CAAQ3N,QAAS,kBAAM8M,EAAMD,EAAK,KAAlC,MACAjN,EAAAC,EAAAC,cAAC6N,GAAA,EAAD,CAAQ3N,QAAS,kBAAM8M,EAAMD,EAAK,KAAlC,QAGRjN,EAAAC,EAAAC,cAAC0N,GAAA,EAAD,CAAMlJ,MAAI,EACJmJ,WAAW,SACXN,MAAO,CAAEP,UAAW,WACtBhN,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAAYO,MAAM,SAASa,MAAO,CAACd,MAAO,KAAMQ,IAEpDjN,EAAAC,EAAAC,cAAC0N,GAAA,EAAD,CAAMlJ,MAAI,EACJmJ,WAAW,SACXtN,UAAWjB,EAAQwN,YACrB9M,EAAAC,EAAAC,cAAC4N,GAAA,EAAD,CAAazB,MAAM,UAAUD,QAAQ,WAAWxB,KAAK,SACjD5K,EAAAC,EAAAC,cAAC6N,GAAA,EAAD,CAAQ3N,QAAS,kBAAM8M,EAAMD,EAAK,KAAlC,MACAjN,EAAAC,EAAAC,cAAC6N,GAAA,EAAD,CAAQ3N,QAAS,kBAAM8M,EAAMD,EAAK,KAAlC,MACAjN,EAAAC,EAAAC,cAAC6N,GAAA,EAAD,CAAQ3N,QAAS,kBAAM8M,EAAMD,EAAK,MAAlC,SAGRjN,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,QAzDE,SAACC,GACvBN,EAAUM,EAAMC,gBAyDIC,UAAWjB,EAAQJ,OACnBsB,aAAW,mBAEXR,EAAAC,EAAAC,cAAC8N,GAAA,EAAD,OAEJhO,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACIE,SAAUd,EACVe,KAAMC,QAAQhB,GACdiB,QAzDJ,WAChBhB,EAAU,QA0DWwM,GAAWvL,IAAI,SAACC,EAAQC,GAAT,OACZlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACIC,OAAO,EACPC,IAAKJ,EACLb,QAAS,SAAAC,GAAK,OAAIiB,EAAoBjB,EAAOa,KAE5CD,OAKjBjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,QAAS,SAAAqN,GAAC,OAAIlF,EAA0B7D,KAChD1E,EAAAC,EAAAC,cAACmI,GAAA,EAAD,YC/ETrJ,mBA9BA,SAACC,GAAD,MAAiB,CAC5BgP,KAAM,CACFxB,MAAO,OACPyB,gBAAiBjP,EAAMkP,QAAQC,WAAWC,OAE9C7B,SAAU,CACNC,MAAO,OACPC,MAAO,WAuBA1N,CAnBf,SAAkBK,GAAY,IAClBC,EAAYD,EAAZC,QACFgP,EAAY/F,EAAiC,cAEnD,OACIvI,EAAAC,EAAAC,cAAA,OAAKK,UAAWjB,EAAQ2O,MACpBjO,EAAAC,EAAAC,cAACqO,GAAA,EAAD,KACIvO,EAAAC,EAAAC,cAACsO,GAAA,EAAD,KACKF,EAAUtN,IAAI,SAAC0D,GAAD,OACV1E,EAAAC,EAAAC,cAACuO,GAAD,CACG/J,KAAMA,EACNrD,IAAKqD,EAAK/D,0CCkBvB3B,mBAvCA,SAACC,GAAD,MAAiB,CAC5ByP,OAAQ,CACJC,SAAU,WACVC,OAAQ3P,EAAMG,QAAQ,GACtByP,MAAO5P,EAAMG,QAAQ,IAEzB0P,IAAK,CACDC,WAAY9P,EAAMG,QAAQ,MAgCnBJ,CA5Bf,SAAwBK,GAAY,IACxBC,EAAYD,EAAZC,QACFqE,EAAc4E,EAA+B,cAC7C+F,EAAY/F,EAAiC,cAC7CyG,EAAmC,IAArBV,EAAU9K,OAE9B,OACIxD,EAAAC,EAAAC,cAAA,OAAKK,UAAWjB,EAAQoP,QACpB1O,EAAAC,EAAAC,cAAC+O,GAAA,EAAD,CAAK1O,UAAWjB,EAAQwP,IACpBzC,MAAM,YACN9M,SAAUyP,EACV5O,QAAS,kBAAMkO,EAAUxH,QAAQ,SAAAhE,GAAC,OAAIyF,EAA0BzF,OAChE9C,EAAAC,EAAAC,cAACgP,GAAA,EAAD,OAEJlP,EAAAC,EAAAC,cAAC+O,GAAA,EAAD,CAAK1O,UAAWjB,EAAQwP,IACpBzC,MAAM,UACN9M,SAAUyP,EACV5O,QAAS,kBAAMuD,aAAuBpC,EV4MtD,WACI,GAAMoC,aAAuBpC,EAA7B,CAGA,IAAM4N,EAAWnL,EAAqBD,EAAgBJ,EAAYlC,aAClEkC,EAAcA,EAAY4H,KAAKxH,EAAgBP,QAC/C,IAAM4L,EAAWpL,EAAqBD,EAAgBJ,EAAYlC,aAElE2D,EAAa+J,GAAU,GACvB/J,EAAagK,GAAU,GAEvBxL,IACAuL,EAAS7L,SAAST,OAClBuM,EAAS9L,SAAST,QUxNc0F,GVKpC,WACI,GAA+B,IAA3BxE,EAAgBP,OAApB,CAGAG,EAAc,IAAIpC,EAAmB,EAAG,GACxC,IAAM8N,EAAahL,EAAiB,GACpCgL,EAAWnL,MAAQmL,EAAWnL,MAAMkB,cAAa,GACjDxB,IACAyL,EAAW/L,SAAST,QUZY0F,KACpBvI,EAAAC,EAAAC,cAACoP,GAAA,EAAD,sECxBVC,GAAU,CACZ,CAAEC,KAAMxP,EAAAC,EAAAC,cAACuP,GAAA,EAAD,MACNtN,KAAM,uBACNuN,IAAK,wDAEP,CAAEF,KAAMxP,EAAAC,EAAAC,cAACyP,GAAA,EAAD,MACNxN,KAAM,eACNuN,IAAK,iDA2CI1Q,mBA1DA,SAACC,GAAD,MAAiB,CAC5B2Q,UAAW,CACPjB,SAAU,WACVkB,IAAK5Q,EAAMG,QAAQ,IACnByP,MAAO5P,EAAMG,QAAQ,OAsDdJ,CAvCf,SAAsBK,GAAY,IACtBC,EAAYD,EAAZC,QADsBwQ,EAENC,IAAMrQ,UAAS,GAFTsQ,EAAApQ,OAAAC,EAAA,EAAAD,CAAAkQ,EAAA,GAEvBjP,EAFuBmP,EAAA,GAEjBC,EAFiBD,EAAA,GAIxBE,EAAc,kBAAMD,EAAQ,SAAAE,GAAQ,OAAKA,KACzCC,EAAa,kBAAMH,GAAQ,IAC3BI,EAAc,kBAAMJ,GAAQ,IAElC,OACIjQ,EAAAC,EAAAC,cAAA,OAAKK,UAAWjB,EAAQ2O,MACxBjO,EAAAC,EAAAC,cAACoQ,GAAA,EAAD,CACIC,UAAU,6BACVhQ,UAAWjB,EAAQsQ,UACnBJ,KAAMxP,EAAAC,EAAAC,cAACsQ,GAAA,EAAD,CAAehB,KAAMxP,EAAAC,EAAAC,cAACuQ,GAAA,EAAD,MAAkBC,SAAU1Q,EAAAC,EAAAC,cAACuQ,GAAA,EAAD,QACvDE,OAAQN,EACRjQ,QAAS8P,EACTnP,QAASsP,EACTO,QAASR,EACTS,aAAcT,EACdU,aAAcT,EACdxP,KAAMA,EACNkQ,UAAU,QAETxB,GAAQvO,IAAI,SAAAgQ,GAAM,OACnBhR,EAAAC,EAAAC,cAAC+Q,GAAA,EAAD,CACI5P,IAAK2P,EAAO7O,KACZqN,KAAMwB,EAAOxB,KACb0B,aAAcF,EAAO7O,KACrB/B,QAAS,WACL8P,IACAiB,OAAOtQ,KAAKmQ,EAAOtB,IAAK,mBC0B7B1Q,mBAhEA,SAACC,GAAD,MAAiB,CAC9BgP,KAAM,CACJT,QAAS,QAEX4D,OAAQ,CACNC,OAAQpS,EAAMoS,OAAOC,OAAS,GAEhCA,OAAQ,CACN7E,MAVgB,IAWhB8E,WAAY,GAEdC,YAAa,CACX/E,MAdgB,KAgBlBgF,QAAS,CACPC,SAAU,EACV/E,QAAS1N,EAAMG,QAAQ,GACvB2P,WAnBgB,KAqBlBlH,MAAO,CACL1I,OAAQF,EAAMG,QAAQ,IAExBuS,QAAS1S,EAAM2S,OAAOD,QACtBE,KAAM,CACJH,SAAU,KAwCC1S,CApCf,SAAkBK,GAAY,IACpBC,EAAYD,EAAZC,QAER,OACEU,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAC4R,EAAA,EAAD,MACA9R,EAAAC,EAAAC,cAAC6R,EAAA,EAAD,CAAQpD,SAAS,QAAQpO,UAAWjB,EAAQ8R,QAC1CpR,EAAAC,EAAAC,cAAC8R,EAAA,EAAD,KACEhS,EAAAC,EAAAC,cAACiM,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUC,QAAM,GAA/C,oBAGAtM,EAAAC,EAAAC,cAAC+R,GAAD,MACAjS,EAAAC,EAAAC,cAAA,OAAKK,UAAWjB,EAAQuS,OACxB7R,EAAAC,EAAAC,cAACgS,GAAD,QAGJlS,EAAAC,EAAAC,cAACiS,EAAA,EAAD,CACE5R,UAAWjB,EAAQgS,OACnBlF,QAAQ,YACR9M,QAAS,CACP+O,MAAO/O,EAAQkS,aAEjB1R,OAAO,QAEPE,EAAAC,EAAAC,cAAA,OAAKK,UAAWjB,EAAQqS,UACxB3R,EAAAC,EAAAC,cAACkS,GAAD,OAEFpS,EAAAC,EAAAC,cAAA,QAAMK,UAAWjB,EAAQmS,SACvBzR,EAAAC,EAAAC,cAAA,OAAKK,UAAWjB,EAAQqS,UACxB3R,EAAAC,EAAAC,cAACmS,GAAD,OAEFrS,EAAAC,EAAAC,cAACoS,GAAD,SCnESC,OALf,SAAalT,GAEX,OAAOW,EAAAC,EAAAC,cAACsS,GAAD,OCOW1R,QACW,cAA7BqQ,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAAS/J,MACvB,2DCZNgK,IAASC,OAAO5S,EAAAC,EAAAC,cAAC2S,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.055e3fa6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { PlaylistAdd } from '@material-ui/icons';\nimport { withStyles, IconButton, Menu, MenuItem } from '@material-ui/core';\ntype MouseEvt = React.MouseEvent<HTMLElement, MouseEvent>;\n\nconst styles = (theme: any) => ({\n    button: {\n      margin: theme.spacing(1),\n    }\n});\n\nconst inits = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2];\n\nfunction InitSelector(props: {classes: any, disabled: boolean, onSelected: ((x: number) => void)}) {\n    const { classes, disabled, onSelected } = props;\n\n    const [anchor, setAnchor] = useState<HTMLElement|null>(null);\n\n    const handleClickButton = (event: MouseEvt) => {\n        setAnchor(event.currentTarget);\n    };\n  \n    const handleMenuItemClick = (event: MouseEvt, index: number) => {\n        setAnchor(null);\n        onSelected(inits[index]);\n    };\n  \n    const handleClose = () => {\n        setAnchor(null);\n    };\n\n    return (\n        <span>\n            <IconButton \n                onClick={handleClickButton}\n                className={classes.button} \n                disabled={disabled}\n                aria-label=\"Add to Initiative\"\n            >\n                <PlaylistAdd/>\n            </IconButton>\n            <Menu                \n                id=\"lock-menu\"\n                anchorEl={anchor}\n                open={Boolean(anchor)}\n                onClose={handleClose}\n            >\n            {inits.map((option, index) => (\n                <MenuItem\n                    dense={true}\n                    key={option}\n                    onClick={event => handleMenuItemClick(event, index)}\n                >\n                {option}\n                </MenuItem>\n            ))}\n            </Menu>\n        </span>)\n}\n\nexport default withStyles(styles)(InitSelector);","/*\n  The current state of the initiative order, defined by the current round and\n  index of active initiative item.\n*/\nexport class CurrentCombatState {\n    /*\n        Creates the current combat state. Active items are zero indexed.\n    */\n    constructor(readonly round: number, readonly activeItem: number) {}\n\n    next(itemsInRound: number) {\n        const nextActiveItem = (this.activeItem + 1) % itemsInRound;\n        var nextRound = this.round;\n        if(nextActiveItem <= this.activeItem) {\n            nextRound++;\n        }\n        return new CurrentCombatState(nextRound, nextActiveItem);\n    }\n}\n\n// A constant representing the state where combat hasn't started.\nexport const NotStarted : CombatState = 'NotStarted';\n\n// The state of combat is either \n// - not started; or\n// - the current state of the initiative.\nexport type CombatState = 'NotStarted' | CurrentCombatState","/**\n * A readonly epresentation of an initiative entry.\n */\nexport class InitiativeEntry {\n    constructor(\n        readonly name: string,\n        readonly init: number,\n        readonly id: number,\n        readonly active: boolean,\n        readonly canMoveDown: boolean,\n        readonly canMoveUp: boolean) { }\n\n    /**\n     * Create a verion of this instance with an updated active state.\n     * @param isActive The new active state.\n     */\n    updateActive(isActive: boolean): InitiativeEntry {\n        return new InitiativeEntry(this.name, this.init, this.id, isActive, this.canMoveDown, this.canMoveUp);\n    }\n\n    /**\n     * Updates the movability state of the entry, returning an updated version.\n     * @param index The new index this entry will occupy.\n     * @param totalItems The total number of items being displayed.\n     */\n    updateMovement(index: number, totalItems: number): InitiativeEntry {\n        const canMoveDown = index < totalItems - 1;\n        const canMoveUp = index > 0;\n        return new InitiativeEntry(this.name, this.init, this.id, this.active, canMoveDown, canMoveUp);\n    }\n}","import { useEffect, useState } from \"react\";\n\n/**\n This module provides a simple library using React Hooks to provide update \n events for model objects.\n*/\n\n/**\n * Type to represent a handler for an event of type T.\n */\nexport type Handler<T> = (x: T) => void;\n\n/**\n * Represents a source for events of type T. \n */\nexport interface EventDefinition<T> {\n    /**\n     * Triggers an update in all listeners to this source. This function should\n     * be used by model code.\n     */\n    fire: () => void,\n\n    /**\n     * This is a React Hook that declares a component will use this object and\n     * be re-rendered when the object is updated.\n     * @param x A handler that will be run when the state of the watched object\n     * changes.\n     */\n    useEvents: (x: Handler<T>) => T\n};\n\n/**\n * Defines a new event definition.\n * @param state a function that provides the current value of the object the \n * event definition is firing events for.\n */\nexport function defineEvent<T>(state: () => T): EventDefinition<T> {\n    // List of event handlers for this event.\n    let handlerList: Handler<T>[] = [];\n\n    return {\n        fire: () => handlerList.map(x => x(state())),\n        useEvents: (x: Handler<T>) => {\n            const [currState, setCurrState] = useState(state);\n\n            // Create an event handler that updates the State hook above.\n            const handler = (y: T) => {\n                setCurrState(y);\n                x(y);\n            }\n            \n            // Add and remove events during the component lifecycle.\n            useEffect(() => {\n                handlerList.push(handler);\n                return () => unsubscribe(handlerList, handler);\n            });\n            return currState;\n        }\n    };\n}\n\nfunction unsubscribe<T>(handlers: T[], handler: T) {\n    for (var i = handlers.length - 1; i >= 0; i--) {\n        if (handlers[i] === handler) {\n            handlers.splice(i, 1);\n        }\n    }\n}","\nimport { CurrentCombatState, NotStarted, CombatState } from \"./CombatState\";\nimport { InitiativeEntry } from \"./InitiativeEntries\";\nimport { defineEvent, Handler, EventDefinition } from \"../Core/EventHandlers\";\n\n/**\n * This module defines the model for managing the state of initiative items and\n * the current round.\n */\n\n // Export some convenient type aliases.\nexport interface InitiativeInfo { entry: InitiativeEntry, handlers: EventDefinition<InitiativeEntry> };\nexport type CombatStateHandler = Handler<CombatState>;\nexport type InitEntryHandler = Handler<InitiativeEntry[]>\n\nexport {\n    // eslint-disable-next-line\n    useCombatStateEvents,\n    startCombat,\n    nextInit,\n    addInitEntry,\n    duplicateInitEntry,\n    removeInitEntry,\n    moveInitEntryDown,\n    moveInitEntryUp,\n    getInitItems,\n    // eslint-disable-next-line\n    useInitEntryListEvents,\n    // eslint-disable-next-line\n    useInitEntryEvents\n}\n\n/* Combat State */\n\nlet combatState = NotStarted;\nconst { fire: fireCombatStateEvents, useEvents: useCombatStateEvents } = defineEvent(() => combatState);\n\n/**\n * Start or restart combat.\n */\nfunction startCombat() {\n    if (initiativeItems.length === 0) {\n        return;\n    }\n    combatState = new CurrentCombatState(1, 0);\n    const firstEntry = initIndexToEntry(0);\n    firstEntry.entry = firstEntry.entry.updateActive(true);\n    fireCombatStateEvents();\n    firstEntry.handlers.fire();\n}\n\n/* Initiative Items */\n\nlet nextInitId = 0;\nconst initiativeItems: number[] = [];\nconst initiativeItemLookup: { [id: number]: InitiativeInfo } = {};\nconst { fire: fireInitEntryEvents, useEvents: useInitEntryListEvents } = defineEvent(getInitItems);\n\nfunction useInitEntryEvents(id: number, handler: Handler<InitiativeEntry>) {\n    return initiativeItemLookup[id].handlers.useEvents(handler);\n}\n\nfunction getInitItems(): InitiativeEntry[] {\n    return initiativeItems.slice().map(x => initiativeItemLookup[x].entry);\n}\n\nfunction initIndexToEntry(i: number): InitiativeInfo {\n    return initiativeItemLookup[initiativeItems[i]];\n}\n\nfunction addInitEntry(name: string, init: number) {\n    let itemIndex = findAddIndex(init);\n    addInitAtIndex(name, init, itemIndex);\n}\n\nfunction addInitAtIndex(name: string, init: number, itemIndex: number) {\n    const id = nextInitId++;\n    let item = new InitiativeEntry(name, init, id, false, false, false)\n    initiativeItems.splice(itemIndex, 0, item.id);\n\n    // If we added an item above the current item in combat, move the activeItem down one.\n    if (combatState instanceof CurrentCombatState && combatState.activeItem >= itemIndex) {\n        combatState = new CurrentCombatState(combatState.round, combatState.activeItem + 1)\n        fireCombatStateEvents();\n    }\n    initiativeItemLookup[item.id] = {\n        entry: item,\n        handlers: defineEvent(() => initiativeItemLookup[item.id].entry)\n    };\n    updateSurroundingMovement(itemIndex);\n    fireInitEntryEvents();\n}\n\n/**\n * Determines the correct index to insert a new initiative item with the given\n * initiative. The new item will be inserted below any other items at the same\n * initiative.\n * @param init The initiative value being added.\n */\nfunction findAddIndex(init: number): number {\n    for (var i = 0; i < initiativeItems.length; i++) {\n        if (initIndexToEntry(i).entry.init < init) {\n            return i;\n        }\n    }\n\n    return initiativeItems.length;\n}\n\n/**\n * Duplicates an initiative entry a given number of times, updating the names\n * to indicate that they are duplicates.\n * @param item The item to duplicate.\n * @param times The number of times to duplicate the item.\n */\nfunction duplicateInitEntry(item: InitiativeEntry, times: number) {\n    const index = initiativeItems.findIndex(x => x === item.id)\n    const info = initiativeItemLookup[initiativeItems[index]];\n    for (let i = 0; i < times; i++) {\n        let name = info.entry.name + \" (\" + (i + 2) + \")\";\n        addInitAtIndex(name, info.entry.init, index + 1 + i);\n    }\n    info.entry = new InitiativeEntry(info.entry.name + \" (\" + 1 + \")\",\n        info.entry.init, info.entry.id, info.entry.active, info.entry.canMoveDown, info.entry.canMoveUp);\n    info.handlers.fire();\n}\n\nfunction removeInitEntry(entry: InitiativeEntry) {\n    const index = initiativeItems.findIndex(x => x === entry.id);\n    if (index === -1) {\n        throw new Error(\"Tried to remove initiative entry that doesn't exist. ID:\" + entry.id);\n    }\n    initiativeItems.splice(index, 1);\n    delete initiativeItemLookup[entry.id];\n    fireInitEntryEvents();\n    updateSurroundingMovement(Math.min(index, initiativeItems.length - 1));\n\n    // Handle the effect of the change on the current combat.\n    if (combatState instanceof CurrentCombatState) {\n        if (initiativeItems.length === 0) {\n            // Last init? End combat.\n            combatState = NotStarted;\n        } else if (index >= combatState.activeItem) {\n            // The active index has to be updated.\n            const newActiveIndex = Math.max(0, combatState.activeItem - 1);\n            combatState = new CurrentCombatState(combatState.round, newActiveIndex);\n\n            // And the actual active item if we removed the current selection.\n            if (entry.active) {\n                const newActiveItem = initIndexToEntry(newActiveIndex);\n                updateActive(newActiveItem, true)\n                newActiveItem.handlers.fire();\n            }\n        }\n        fireCombatStateEvents();\n    }\n}\n\nfunction moveInitEntryDown(entry: InitiativeEntry) {\n    const index = initiativeItems.findIndex(x => x === entry.id);\n    if (index === -1) {\n        throw new Error(\"Tried to move initiative entry that doesn't exist. ID:\" + entry.id);\n    }\n\n    // The last item can't be moved down.\n    if (index === initiativeItems.length - 1) {\n        return;\n    }\n\n    swapInits(index, index + 1);\n}\n\nfunction moveInitEntryUp(entry: InitiativeEntry) {\n    const index = initiativeItems.findIndex(x => x === entry.id);\n    if (index === -1) {\n        throw new Error(\"Tried to move initiative entry that doesn't exist. ID:\" + entry.id);\n    }\n\n    // The fist item can't be moved down.\n    if (index === 0) {\n        return;\n    }\n\n    swapInits(index, index - 1);\n}\n\n/**\n * Swaps the position of two items in initiative order. If one of the items\n * is the active item.\n * @param index1 The first index being swapped.\n * @param index2 The second index being swapped.\n */\nfunction swapInits(index1: number, index2: number) {\n    var originalEntry = initiativeItems[index1];\n    initiativeItems[index1] = initiativeItems[index2];\n    initiativeItems[index2] = originalEntry;\n\n    const firstEvent = updateMovementForIndex(index1);\n    const secondEvent = updateMovementForIndex(index2);\n\n    if (combatState instanceof CurrentCombatState) {\n        if (index1 === combatState.activeItem) {\n            combatState = new CurrentCombatState(combatState.round, index2);\n            fireCombatStateEvents();\n        } else if (index2 === combatState.activeItem) {\n            combatState = new CurrentCombatState(combatState.round, index1);\n            fireCombatStateEvents();\n        }\n    }\n    fireInitEntryEvents();\n    firstEvent();\n    secondEvent();\n}\n\nfunction updateMovementForIndex(index: number): (() => void) {\n    const entry = initIndexToEntry(index);\n    entry.entry = entry.entry.updateMovement(index, initiativeItems.length);\n    return entry.handlers.fire;\n}\n\n/**\n * Updates the movement state for the given index and surrounding indices.\n * @param index The index to update around.\n */\nfunction updateSurroundingMovement(index: number) {\n    if (index >= initiativeItems.length || index < 0) {\n        return;\n    }\n\n    updateMovementForIndex(index)();\n    if (index > 0) {\n        updateMovementForIndex(index - 1)();\n    }\n    if (index < initiativeItems.length - 1) {\n        updateMovementForIndex(index + 1)();\n    }\n}\n\nfunction nextInit() {\n    if (!(combatState instanceof CurrentCombatState)) {\n        return;\n    }\n    const lastItem = initiativeItemLookup[initiativeItems[combatState.activeItem]];\n    combatState = combatState.next(initiativeItems.length);\n    const nextItem = initiativeItemLookup[initiativeItems[combatState.activeItem]];\n\n    updateActive(lastItem, false);\n    updateActive(nextItem, true);\n\n    fireCombatStateEvents();\n    lastItem.handlers.fire();\n    nextItem.handlers.fire();\n}\n\nfunction updateActive(info: InitiativeInfo, isActive: boolean) {\n    initiativeItemLookup[info.entry.id].entry = info.entry.updateActive(isActive);\n}\n","/**\n * A single previously definined initiative item, and the groups it belongs to.\n */\nexport class HistoryEntry {\n\n    groups: Set<string>;\n\n    constructor(readonly name: string) {\n        this.groups = new Set();\n    }\n}\n\n/**\n * A sorting comparator, using the names of history entries.\n */\nexport function defaultHistoryEntrySort(a: HistoryEntry, b: HistoryEntry): number {\n    return a.name.localeCompare(b.name);\n}","import { defineEvent, EventDefinition, Handler } from \"../Core/EventHandlers\";\nimport { HistoryEntry } from \"./HistoryEntries\";\n\n/**\n * This module provides the interface for Quick Initiative to manage saved\n * initiative items. Items are uniquely identified by their name, as they don't\n * really have any other identity.\n */\n\nconst {\n    fire: fireHistoryEntryListEvents,\n    useEvents: useHistoryItemListEvents,\n} = defineEvent(getHistoryItems);\n\nexport {\n    useHistoryItemListEvents,\n    useHistoryItemEvents,\n    getHistoryItems,\n    addHistoryItem,\n    addHistoryItemToGroup,\n    removeHistoryItem,\n    removeHistoryItemFromGroup,\n    renameGroup,\n    saveToLocalStorage\n}\n\n// In-application representation of history items.\n// Each value has the item itself and the event definition for that item.\nconst historyItems: Map<string, { entry: HistoryEntry, handlers: EventDefinition<HistoryEntry> }> = new Map();\n\nfunction getHistoryItems(): HistoryEntry[] {\n    return Array.from(historyItems.values(), x => x.entry);\n}\n\n/**\n * \n * @param name The name of the item to register with for updates.\n * @param handler The update handler.\n */\nfunction useHistoryItemEvents(name: string, handler: Handler<HistoryEntry>): HistoryEntry {\n    var item = historyItems.get(name);\n    if (!item) {\n        throw new Error(\"Tried to get events for non-existant entry.\");\n    }\n    return item.handlers.useEvents(handler);\n}\n\n/**\n * Adds a new history item, if it doesn't exist.\n * @param name The name of the new item.\n * @param groups The groups to add the item to initially.\n * @returns true, if and only if a new item was added.\n */\nfunction addHistoryItem(name: string, groups: string[]): boolean {\n    if (historyItems.has(name)) {\n        return false;\n    }\n\n    const entry = new HistoryEntry(name);\n    groups.forEach(group => {\n        entry.groups.add(group);\n    });\n\n    historyItems.set(name,\n        {\n            entry: entry,\n            handlers: defineEvent(() => {\n                var item = historyItems.get(name);\n                if (item) {\n                    return item.entry;\n                }\n                throw new Error(\"Missing history item.\");\n            })\n        });\n    fireHistoryEntryListEvents();\n    return true;\n}\n\nfunction removeHistoryItem(item: HistoryEntry) {\n    if(historyItems.delete(item.name)) {\n        fireHistoryEntryListEvents();\n    }\n}\n\nfunction addHistoryItemToGroup(item: HistoryEntry, group: string) {\n    const entry = historyItems.get(item.name);\n    if(!entry) {\n        throw new Error(\"Missing history item.\")\n    }\n\n    entry.entry.groups.add(group);\n    entry.handlers.fire();\n    fireHistoryEntryListEvents();\n}\n\nfunction removeHistoryItemFromGroup(item: HistoryEntry, group: string) {\n    const entry = historyItems.get(item.name);\n    if(!entry) {\n        throw new Error(\"Missing history item.\")\n    }\n\n    if(entry.entry.groups.delete(group)) {\n        entry.handlers.fire();\n        fireHistoryEntryListEvents();\n    }\n}\n\nfunction renameGroup(oldName: string, newName: string) {\n    historyItems.forEach(item => {\n        if(item.entry.groups.delete(oldName)) {\n            item.entry.groups.add(newName);\n            item.handlers.fire();\n        }\n    });\n    fireHistoryEntryListEvents();\n}\n\nfunction saveToLocalStorage() {\n    localStorage.setItem(\"historyItems\",\n        JSON.stringify(getHistoryItems().map((x: HistoryEntry): object =>\n            ({ name: x.name, groups: Array.from(x.groups).filter(x => x.length > 0)}))));\n}\n\n// History items are loaded on module load.\nconst storedItems = localStorage.getItem(\"historyItems\");\nif (storedItems) {\n    const storedJson = JSON.parse(storedItems);\n    storedJson.forEach((element: any) => {\n        addHistoryItem(element.name, element.groups);\n    });\n}","import React from 'react';\nimport { withStyles, ListItem, ListItemText, ListItemSecondaryAction, IconButton } from '@material-ui/core';\nimport { HistoryEntry } from '../Model/HistoryEntries';\nimport InitSelector from './InitSelector';\nimport * as InitModel from '../Model/InitModel';\nimport * as HistoryModel from '../Model/HistoryModel';\nimport { Delete } from '@material-ui/icons';\n\nconst styles = (theme: any) => ({\n    input: {\n        margin: theme.spacing(1),\n    }\n});\n\nfunction HistoryItem(props: { classes: any, item: HistoryEntry, showInit: boolean }) {\n    const item = HistoryModel.useHistoryItemEvents(props.item.name, () => { });\n\n    const handleInitSelected = (init: number) => {\n        InitModel.addInitEntry(item.name, init);\n    }\n\n    const handleClick = () => {\n        if(item.groups.has(\"\") && !props.showInit) {\n            HistoryModel.removeHistoryItemFromGroup(item, \"\");\n        } else {\n            HistoryModel.addHistoryItemToGroup(item, \"\");\n        }\n    }\n\n    return (\n        <ListItem dense button onClick={handleClick}>\n            <ListItemText primary={item.name} />\n            {\n                props.showInit ? \n                    <ListItemSecondaryAction>\n                        <IconButton onClick={() => HistoryModel.removeHistoryItem(item)}>\n                            <Delete />\n                        </IconButton>\n                        <InitSelector disabled={false} onSelected={handleInitSelected} />\n                    </ListItemSecondaryAction>\n                : \n                    <></>\n            }\n        </ListItem>\n    )\n}\n\nexport default withStyles(styles)(HistoryItem);","\n/**\n * Check whether a given string is null or is only spaces.\n * @param str The string to check.\n */\nexport function isNullOrEmpty(str: string | null) {\n    return str === null || str.match(/^ *$/) !== null;\n}","import React, { useRef, useState } from 'react';\nimport { withStyles, ListItem, ListItemText, ListItemSecondaryAction, Input, IconButton } from '@material-ui/core';\nimport * as HistoryModel from '../Model/HistoryModel';\nimport { isNullOrEmpty } from '../Core/StringUtils';\nimport { LibraryAdd } from '@material-ui/icons';\n\nconst styles = (theme: any) => ({\n    input: {\n        margin: theme.spacing(1),\n    }\n});\n\nfunction GroupCreator(props: { classes: any }) {\n    const { classes } = props;\n\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [isCreateGroupButtonDisabled, setSelectorDisabled] = useState(true);\n    const [nameText, setNameText] = useState(\"\");\n\n    const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setSelectorDisabled(isNullOrEmpty(event.currentTarget.value));\n        setNameText(event.currentTarget.value);\n    };\n\n    const createGroup = () => {\n        HistoryModel.renameGroup(\"\", nameText);\n    }\n    \n    return (\n        <ListItem>\n            <ListItemText>\n                <Input\n                    inputRef={inputEl}\n                    placeholder=\"Group Name\"\n                    onChange={handleTextChange}\n                    inputProps={{\n                        'aria-label': 'Group Name',\n                    }} />\n            </ListItemText>\n            <ListItemSecondaryAction>\n                <IconButton className={classes.input} \n                            disabled={isCreateGroupButtonDisabled} onClick={createGroup}>\n                    <LibraryAdd />\n                </IconButton>\n            </ListItemSecondaryAction>\n        </ListItem>\n    )\n}\n\nexport default withStyles(styles)(GroupCreator);","import React, { useState, useRef, useMemo } from 'react';\nimport { Input, withStyles, List, ListItem, ListItemText, ListItemSecondaryAction, ListSubheader, Divider } from \"@material-ui/core\";\nimport InitSelector from \"./InitSelector\";\nimport * as InitModel from '../Model/InitModel';\nimport * as HistoryModel from '../Model/HistoryModel';\nimport { defaultHistoryEntrySort, HistoryEntry } from '../Model/HistoryEntries';\nimport HistoryItem from './HistoryItem';\nimport GroupCreator from './GroupCreator';\nimport { isNullOrEmpty } from '../Core/StringUtils';\n\nconst styles = () => ({\n    input: {\n    },\n    historyList: {\n        overflow: 'scroll',\n        height: 'calc(100% - 70px)'\n    },\n    filteringBar: {\n        overflow: 'hidden'\n    }\n});\n\n/**\n * Checks if an entry's name or groups contains a given string, using\n * case-insensitive comparison.\n * @param item The item to check.\n * @param filterText The text to match.\n */\nfunction entryHasText(item: HistoryEntry, filterText: string): boolean {\n    if(item.name.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())) {\n        return true;\n    }\n\n    let hasText = false;\n    item.groups.forEach(x => {\n        if(x.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())) {\n            hasText = true;\n        }\n    });\n\n    return hasText;\n}\n\nfunction FilteringPanel(props: { classes: any }) {\n    const { classes } = props;\n\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [isSelectorDisabled, setSelectorDisabled] = useState(true);\n    const [filterText, setFilterText] = useState(\"\");\n\n    const historyList = HistoryModel.useHistoryItemListEvents(HistoryModel.saveToLocalStorage);\n\n    const filteredList = useMemo(\n        () => historyList.filter(x => entryHasText(x, filterText)).sort(defaultHistoryEntrySort),\n        [historyList, filterText]);\n\n    // The group for entries about to be added to a named group.\n    const pendingGroup = historyList.filter(x => x.groups.has(\"\"));\n\n    // The group for entries in no particular group.\n    const others = filteredList.filter(x => x.groups.size === 0);\n\n    // Set up the real groups.\n    const groups = new Map<string, HistoryEntry[]>();\n    for(const item of filteredList) {\n        item.groups.forEach(group => {\n            if(isNullOrEmpty(group)) {\n                return;\n            }\n\n            const toAdd = groups.get(group) as HistoryEntry[];\n            if (toAdd === undefined) {\n                groups.set(group, []);\n            }\n            \n            toAdd.push(item);\n        });\n    }\n\n    const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setSelectorDisabled(isNullOrEmpty(event.currentTarget.value));\n        setFilterText(event.currentTarget.value);\n    };\n\n    const handleInitSelected = (init: number) => {\n        if (inputEl.current == null) {\n            return;\n        }\n        InitModel.addInitEntry(inputEl.current.value, init)\n        HistoryModel.addHistoryItem(inputEl.current.value, [\"\"]);\n        inputEl.current.value = \"\";\n        setSelectorDisabled(true);\n        setFilterText(\"\");\n    };\n\n    return (\n        <div className={classes.filteringBar}>\n            <List>\n                <ListItem>\n                    <ListItemText>\n                        <Input\n                            inputRef={inputEl}\n                            placeholder=\"Name\"\n                            onChange={handleTextChange}\n                            className={classes.input}\n                            inputProps={{\n                                'aria-label': 'Name',\n                            }} />\n                    </ListItemText>\n                    <ListItemSecondaryAction>\n                        <InitSelector disabled={isSelectorDisabled} onSelected={handleInitSelected} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </List>\n            <Divider />\n            {\n                pendingGroup.length > 0 ? (\n                    <List>\n                        <GroupCreator ></GroupCreator>  \n                        {pendingGroup.map(\n                            x => <HistoryItem key={x.name} item={x} showInit={false} />)\n                        }\n                        <Divider />\n                    </List>\n                ) :\n                    <></>\n            }\n            <div className={classes.historyList}>\n                {\n                    Array.from(groups).sort((a,b)=> a[0].localeCompare(b[0])).map(entry => \n                        <List>\n                            <ListSubheader disableSticky={true}>{entry[0]}</ListSubheader>\n                            {(entry[1] as HistoryEntry[]).map(\n                                x => <HistoryItem key={x.name} item={x} showInit={true} />)\n                            }\n                        </List>)\n                }\n                {\n                    others.length > 0 ? (\n                        <List>\n                            <ListSubheader disableSticky={true}>Others</ListSubheader>\n                            {others.map(x => <HistoryItem key={x.name} item={x} showInit={true} />)}\n                        </List>\n                    ) :\n                        <></>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default withStyles(styles)(FilteringPanel);","import React from \"react\";\nimport * as InitModel from \"../Model/InitModel\";\nimport { CurrentCombatState } from \"../Model/CombatState\";\nimport { withStyles, Typography } from \"@material-ui/core\";\n\nconst styles = (theme: any) => ({\n    label: {\n      margin: theme.spacing(1),\n    }\n  });\n\nfunction CombatStatusBar(props: any) {\n    const { classes } = props;\n\n    const combatState = InitModel.useCombatStateEvents(() => {});\n\n    if (combatState instanceof CurrentCombatState) {\n        return (\n            <Typography variant=\"body2\" color=\"inherit\" noWrap className={classes.label}>\n            Round {combatState.round}\n            </Typography>\n        );\n    } \n    \n    return <></>;\n\n}\n\nexport default withStyles(styles)(CombatStatusBar);","import React, { useState } from \"react\";\nimport { TableRow, TableCell, withStyles, IconButton, Menu, MenuItem, Typography, ButtonGroup, Button, Grid } from \"@material-ui/core\";\nimport { InitiativeEntry } from \"../Model/InitiativeEntries\";\nimport * as InitModel from \"../Model/InitModel\";\nimport { Delete, ArrowUpward, FileCopy, ArrowDownward } from \"@material-ui/icons\";\n\ntype MouseEvt = React.MouseEvent<HTMLElement, MouseEvent>;\n\nconst styles = (theme: any) => ({\n    initCell: {\n        width: 'auto',\n        align: 'right',\n        padding: 'checkbox'\n    },\n    titleCell: {\n        width: '100%'\n    },\n    actionCell: {\n        width: 'auto'\n    },\n    hpControls: {\n        marginRight: theme.spacing(2),\n        alignSelf: 'center'\n    }\n});\n\nconst duplicates = [2, 3, 4, 5];\n\nfunction InitRow(props: { classes: any, item: InitiativeEntry }) {\n    const { classes } = props;\n    const [hp, setHp] = useState(0);\n    const item = InitModel.useInitEntryEvents(props.item.id, () => {});\n    const [anchor, setAnchor] = useState<HTMLElement | null>(null);\n\n    const handleClickButton = (event: MouseEvt) => {\n        setAnchor(event.currentTarget);\n    };\n\n    const handleMenuItemClick = (event: MouseEvt, index: number) => {\n        setAnchor(null);\n        InitModel.duplicateInitEntry(item, duplicates[index]-1);\n    };\n\n    const handleClose = () => {\n        setAnchor(null);\n    };\n\n\n    return (\n        <TableRow selected={item.active}>\n            <TableCell className={classes.actionCell} padding=\"checkbox\">\n                <div style={{ display: 'flex' }}>\n                    <IconButton onClick={e => InitModel.moveInitEntryUp(item)} disabled={!item.canMoveUp}>\n                        <ArrowUpward />\n                    </IconButton>\n                    <IconButton onClick={e => InitModel.moveInitEntryDown(item)} disabled={!item.canMoveDown}>\n                        <ArrowDownward />\n                    </IconButton>\n                </div>\n            </TableCell>\n            <TableCell className={classes.initCell}>{item.init}</TableCell>\n            <TableCell className={classes.titleCell}>\n                <Typography variant=\"subtitle1\">{item.name}</Typography>\n            </TableCell>\n            <TableCell className={classes.actionCell} padding=\"checkbox\">\n                <div style={{ display: 'flex' }}>\n                    <Grid item \n                          alignItems='center'\n                          style={{ alignSelf: 'center'}}>\n                        <ButtonGroup color=\"primary\" variant='outlined' size='small'>\n                            <Button onClick={() => setHp(hp - 10)}>-10</Button>\n                            <Button onClick={() => setHp(hp - 5)}>-5</Button>\n                            <Button onClick={() => setHp(hp - 1)}>-1</Button>\n                        </ButtonGroup>\n                    </Grid>\n                    <Grid item\n                          alignItems='center' \n                          style={{ alignSelf: 'center'}}>                        \n                        <Typography align='center' style={{width: 50}}>{hp}</Typography>\n                    </Grid>\n                    <Grid item\n                          alignItems='center' \n                          className={classes.hpControls}>\n                        <ButtonGroup color=\"primary\" variant='outlined' size='small'>\n                            <Button onClick={() => setHp(hp + 1)}>+1</Button>\n                            <Button onClick={() => setHp(hp + 5)}>+5</Button>\n                            <Button onClick={() => setHp(hp + 10)}>+10</Button>\n                        </ButtonGroup>\n                    </Grid>\n                    <span>\n                        <IconButton\n                            onClick={handleClickButton}\n                            className={classes.button}\n                            aria-label=\"Duplicate Entry\"\n                        >\n                            <FileCopy />\n                        </IconButton>\n                        <Menu\n                            anchorEl={anchor}\n                            open={Boolean(anchor)}\n                            onClose={handleClose}\n                        >\n                            {duplicates.map((option, index) => (\n                                <MenuItem\n                                    dense={true}\n                                    key={option}\n                                    onClick={event => handleMenuItemClick(event, index)}\n                                >\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Menu>\n                    </span>\n                    <IconButton onClick={e => InitModel.removeInitEntry(item)}>\n                        <Delete />\n                    </IconButton>\n                </div>\n            </TableCell>\n        </TableRow>\n    );\n}\n\nexport default withStyles(styles)(InitRow);","import React from \"react\";\nimport { withStyles, Table, TableBody } from \"@material-ui/core\";\nimport * as InitModel from \"../Model/InitModel\";\nimport InitRow from \"./InitRow\";\n\nconst styles = (theme: any) => ({\n    root: {\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n    },\n    initCell: {\n        width: '50px',\n        align: 'right'\n    }\n});\n\nfunction InitList(props: any) {\n    const { classes } = props;\n    const initItems = InitModel.useInitEntryListEvents(() => {});\n\n    return (\n        <div className={classes.root}>\n            <Table>\n                <TableBody>\n                    {initItems.map((item) =>\n                        (<InitRow\n                            item={item}\n                            key={item.id}/>\n                        ))}\n                </TableBody>\n            </Table>\n        </div>\n    );\n}\n\nexport default withStyles(styles)(InitList);","import React from \"react\";\nimport * as InitModel from \"../Model/InitModel\";\nimport { CurrentCombatState } from \"../Model/CombatState\";\nimport { withStyles, Fab } from \"@material-ui/core\";\nimport { PlayArrowOutlined, DeleteSweep } from \"@material-ui/icons\";\n\nconst styles = (theme: any) => ({\n    fabBox: {\n        position: 'absolute' as 'absolute',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2)\n    },\n    fab: {\n        marginLeft: theme.spacing(2)\n      }\n  });\n\nfunction NextInitButton(props: any) { \n    const { classes } = props;\n    const combatState = InitModel.useCombatStateEvents(() => {});\n    const initItems = InitModel.useInitEntryListEvents(() => {});\n    const noInitItems = initItems.length === 0;\n    \n    return (\n        <div className={classes.fabBox}>\n            <Fab className={classes.fab}\n                color='secondary'\n                disabled={noInitItems}\n                onClick={() => initItems.forEach(x => InitModel.removeInitEntry(x))}>\n                <DeleteSweep />\n            </Fab>\n            <Fab className={classes.fab} \n                color='primary'\n                disabled={noInitItems}\n                onClick={() => combatState instanceof CurrentCombatState ? \n                                    InitModel.nextInit() : \n                                    InitModel.startCombat()}>\n                <PlayArrowOutlined />\n            </Fab>\n        </div>\n    );\n    \n\n}\n\nexport default withStyles(styles)(NextInitButton);","import React from \"react\";\nimport { withStyles } from \"@material-ui/core\";\nimport { SpeedDial, SpeedDialIcon, SpeedDialAction } from \"@material-ui/lab\";\nimport { Home, InfoOutlined, Code } from \"@material-ui/icons\";\n\nconst styles = (theme: any) => ({\n    speedDial: {\n        position: 'absolute' as 'absolute',\n        top: theme.spacing(0.5),\n        right: theme.spacing(0.5),\n      }\n});\n\nconst actions = [\n    { icon: <Home />, \n      name: 'To www.jmreardon.com', \n      url: \"https://www.jmreardon.com/projects/quick_initiative/\"\n    },\n    { icon: <Code />, \n      name: 'Get the Code', \n      url: \"https://github.com/reardonj/quick-initiative\"\n    }\n  ];\n\nfunction InfoDropdown(props: any) {\n    const { classes } = props;\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => setOpen(prevOpen => !prevOpen);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    return (\n        <div className={classes.root}>\n        <SpeedDial\n            ariaLabel=\"SpeedDial openIcon example\"\n            className={classes.speedDial}\n            icon={<SpeedDialIcon icon={<InfoOutlined />} openIcon={<InfoOutlined />} />}\n            onBlur={handleClose}\n            onClick={handleClick}\n            onClose={handleClose}\n            onFocus={handleOpen}\n            onMouseEnter={handleOpen}\n            onMouseLeave={handleClose}\n            open={open}\n            direction='down'\n        >\n            {actions.map(action => (\n            <SpeedDialAction\n                key={action.name}\n                icon={action.icon}\n                tooltipTitle={action.name}\n                onClick={() => {\n                    handleClick();\n                    window.open(action.url, '_blank');\n                }}\n            />\n            ))}\n        </SpeedDial>\n        </div>\n    );\n}\n\nexport default withStyles(styles)(InfoDropdown);","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport FilteringPanel from './FilteringPanel';\nimport CombatStatusBar from './CombatStatusBar';\nimport InitList from './InitList';\nimport NextInitButton from './NextInitButton';\nimport InfoDropdown from './InfoDropdown';\n\nconst drawerWidth = 300;\n\nconst styles = (theme: any) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    marginLeft: drawerWidth\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  toolbar: theme.mixins.toolbar,\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nfunction MainView(props: any) {\n  const { classes } = props;\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Quick Initiative\n          </Typography>\n          <CombatStatusBar />\n          <div className={classes.grow} />\n          <InfoDropdown />\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.toolbar} />\n        <FilteringPanel />\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <InitList />\n      </main>\n      <NextInitButton />\n    </div>\n  );\n}\n\nexport default withStyles(styles)(MainView);","import React from 'react';\nimport MainView from './Components/MainView';\n\nfunction App(props: any) {\n\n  return <MainView></MainView>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}