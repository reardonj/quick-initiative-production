{"version":3,"sources":["Components/InitSelector.tsx","Model/CombatState.ts","Model/InitiativeEntries.ts","Core/EventHandlers.tsx","Model/InitModel.ts","Model/HistoryEntries.ts","Model/HistoryModel.ts","Components/HistoryItem.tsx","Core/StringUtils.ts","Components/GroupCreator.tsx","Components/FilteringPanel.tsx","Components/CombatStatusBar.tsx","Components/InitRow.tsx","Components/InitList.tsx","Components/NextInitButton.tsx","Components/InfoDropdown.tsx","Components/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["inits","Array","from","length","_","i","withStyles","theme","button","margin","spacing","popupGrid","width","props","classes","disabled","onSelected","useState","anchor","setAnchor","IconButton","onClick","event","currentTarget","className","aria-label","PlaylistAdd","Popover","id","anchorEl","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","GridList","cols","cellHeight","map","option","index","Button","size","handleMenuItemClick","CurrentCombatState","round","activeItem","itemsInRound","nextActiveItem","this","nextRound","NotStarted","InitiativeEntry","name","init","active","canMoveDown","canMoveUp","isActive","totalItems","defineEvent","state","handlerList","fire","x","useEvents","currState","setCurrState","handler","y","useEffect","push","handlers","splice","unsubscribe","combatState","fireCombatStateEvents","useCombatStateEvents","nextInitId","initiativeItems","initiativeItemLookup","entry","fireInitEntryEvents","useInitEntryListEvents","initIndexToEntry","addInitEntry","addInitAtIndex","findAddIndex","itemIndex","item","updateSurroundingMovement","removeInitEntry","findIndex","Error","Math","min","newActiveIndex","max","newActiveItem","updateActive","swapInits","index1","index2","originalEntry","firstEvent","updateMovementForIndex","secondEvent","updateMovement","info","HistoryEntry","groups","Set","defaultHistoryEntrySort","a","b","localeCompare","getHistoryItems","fireHistoryEntryListEvents","useHistoryItemListEvents","historyItems","Map","values","addHistoryItem","has","forEach","group","add","set","get","saveToLocalStorage","localStorage","setItem","JSON","stringify","filter","storedItems","getItem","parse","element","input","HistoryModel","ListItem","dense","showInit","delete","ListItemText","primary","ListItemSecondaryAction","Delete","InitModel","isNullOrEmpty","str","match","inputEl","useRef","isCreateGroupButtonDisabled","setSelectorDisabled","nameText","setNameText","Input","inputRef","placeholder","onChange","value","inputProps","oldName","newName","LibraryAdd","historyList","overflow","height","filteringBar","isSelectorDisabled","filterText","setFilterText","filteredList","useMemo","toLocaleLowerCase","includes","hasText","entryHasText","sort","pendingGroup","others","toAdd","undefined","List","current","Divider","ListSubheader","disableSticky","label","Typography","variant","color","noWrap","duplicates","initCell","align","padding","titleCell","actionCell","hpControls","marginRight","alignSelf","hp","setHp","times","TableRow","selected","TableCell","style","display","e","ArrowUpward","ArrowDownward","Grid","alignItems","ButtonGroup","FileCopy","MenuItem","root","backgroundColor","palette","background","paper","initItems","Table","TableBody","fabBox","position","bottom","right","fab","marginLeft","noInitItems","Fab","DeleteSweep","lastItem","next","nextItem","firstInit","PlayArrowOutlined","actions","icon","Home","url","Code","speedDial","top","React","setOpen","handleClick","prevOpen","handleOpen","handleClose","SpeedDial","ariaLabel","SpeedDialIcon","InfoOutlined","openIcon","onBlur","onFocus","onMouseEnter","onMouseLeave","direction","action","SpeedDialAction","tooltipTitle","window","appBar","zIndex","drawer","breakpoints","up","flexShrink","drawerPaper","menuButton","content","flexGrow","toolbar","mixins","grow","mobileOpen","setMobileOpen","handleDrawerToggle","CssBaseline","AppBar","Toolbar","edge","Menu","Hidden","mdUp","implementation","Drawer","ModalProps","keepMounted","smDown","App","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d629121.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { PlaylistAdd } from '@material-ui/icons';\nimport { withStyles, IconButton, Popover, Button, GridList } from '@material-ui/core';\ntype MouseEvt = React.MouseEvent<HTMLElement, MouseEvent>;\n\nconst styles = (theme: any) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  popupGrid: {\n    width: 64 * 5\n  },\n});\n\nconst inits = Array.from({ length: 25 }, (_, i) => i - 1);\n\nfunction InitSelector(props: { classes: any, disabled: boolean, onSelected: ((x: number) => void) }) {\n  const { classes, disabled, onSelected } = props;\n\n  const [anchor, setAnchor] = useState<HTMLElement | null>(null);\n\n  const handleClickButton = (event: MouseEvt) => {\n    setAnchor(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event: MouseEvt, index: number) => {\n    setAnchor(null);\n    onSelected(inits[index]);\n  };\n\n  const handleClose = () => {\n    setAnchor(null);\n  };\n\n  return (\n    <span>\n      <IconButton\n        onClick={handleClickButton}\n        className={classes.button}\n        disabled={disabled}\n        aria-label=\"Add to Initiative\"\n      >\n        <PlaylistAdd />\n      </IconButton>\n      <Popover\n        id=\"lock-menu\"\n        anchorEl={anchor}\n        open={Boolean(anchor)}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'center',\n          horizontal: 'center',\n        }}\n      >\n        <GridList cols={5} cellHeight={48} spacing={0} className={classes.popupGrid}>\n          {inits.map((option, index) => (\n            <Button size='small' onClick={event => handleMenuItemClick(event, index)}>\n              {option}\n            </Button>\n          ))}\n        </GridList>\n      </Popover>\n    </span>)\n}\n\nexport default withStyles(styles)(InitSelector);","/*\n  The current state of the initiative order, defined by the current round and\n  index of active initiative item.\n*/\nexport class CurrentCombatState {\n    /*\n        Creates the current combat state. Active items are zero indexed.\n    */\n    constructor(readonly round: number, readonly activeItem: number) {}\n\n    next(itemsInRound: number) {\n        const nextActiveItem = (this.activeItem + 1) % itemsInRound;\n        var nextRound = this.round;\n        if(nextActiveItem <= this.activeItem) {\n            nextRound++;\n        }\n        return new CurrentCombatState(nextRound, nextActiveItem);\n    }\n}\n\n// A constant representing the state where combat hasn't started.\nexport const NotStarted : CombatState = 'NotStarted';\n\n// The state of combat is either \n// - not started; or\n// - the current state of the initiative.\nexport type CombatState = 'NotStarted' | CurrentCombatState","/**\n * A readonly epresentation of an initiative entry.\n */\nexport class InitiativeEntry {\n    constructor(\n        readonly name: string,\n        readonly init: number,\n        readonly id: number,\n        readonly active: boolean,\n        readonly canMoveDown: boolean,\n        readonly canMoveUp: boolean) { }\n\n    /**\n     * Create a verion of this instance with an updated active state.\n     * @param isActive The new active state.\n     */\n    updateActive(isActive: boolean): InitiativeEntry {\n        return new InitiativeEntry(this.name, this.init, this.id, isActive, this.canMoveDown, this.canMoveUp);\n    }\n\n    /**\n     * Updates the movability state of the entry, returning an updated version.\n     * @param index The new index this entry will occupy.\n     * @param totalItems The total number of items being displayed.\n     */\n    updateMovement(index: number, totalItems: number): InitiativeEntry {\n        const canMoveDown = index < totalItems - 1;\n        const canMoveUp = index > 0;\n        return new InitiativeEntry(this.name, this.init, this.id, this.active, canMoveDown, canMoveUp);\n    }\n}","import { useEffect, useState } from \"react\";\n\n/**\n This module provides a simple library using React Hooks to provide update \n events for model objects.\n*/\n\n/**\n * Type to represent a handler for an event of type T.\n */\nexport type Handler<T> = (x: T) => void;\n\n/**\n * Represents a source for events of type T. \n */\nexport interface EventDefinition<T> {\n    /**\n     * Triggers an update in all listeners to this source. This function should\n     * be used by model code.\n     */\n    fire: () => void,\n\n    /**\n     * This is a React Hook that declares a component will use this object and\n     * be re-rendered when the object is updated.\n     * @param x A handler that will be run when the state of the watched object\n     * changes.\n     */\n    useEvents: (x: Handler<T>) => T\n};\n\n/**\n * Defines a new event definition.\n * @param state a function that provides the current value of the object the \n * event definition is firing events for.\n */\nexport function defineEvent<T>(state: () => T): EventDefinition<T> {\n    // List of event handlers for this event.\n    let handlerList: Handler<T>[] = [];\n\n    return {\n        fire: () => handlerList.map(x => x(state())),\n        useEvents: (x: Handler<T>) => {\n            const [currState, setCurrState] = useState(state);\n\n            // Create an event handler that updates the State hook above.\n            const handler = (y: T) => {\n                setCurrState(y);\n                x(y);\n            }\n            \n            // Add and remove events during the component lifecycle.\n            useEffect(() => {\n                handlerList.push(handler);\n                return () => unsubscribe(handlerList, handler);\n            });\n            return currState;\n        }\n    };\n}\n\nfunction unsubscribe<T>(handlers: T[], handler: T) {\n    for (var i = handlers.length - 1; i >= 0; i--) {\n        if (handlers[i] === handler) {\n            handlers.splice(i, 1);\n        }\n    }\n}","\nimport { CurrentCombatState, NotStarted, CombatState } from \"./CombatState\";\nimport { InitiativeEntry } from \"./InitiativeEntries\";\nimport { defineEvent, Handler, EventDefinition } from \"../Core/EventHandlers\";\n\n/**\n * This module defines the model for managing the state of initiative items and\n * the current round.\n */\n\n// Export some convenient type aliases.\nexport interface InitiativeInfo { entry: InitiativeEntry, handlers: EventDefinition<InitiativeEntry> };\nexport type CombatStateHandler = Handler<CombatState>;\nexport type InitEntryHandler = Handler<InitiativeEntry[]>\n\nexport {\n  // eslint-disable-next-line\n  useCombatStateEvents,\n  startCombat,\n  nextInit,\n  addInitEntry,\n  duplicateInitEntry,\n  removeInitEntry,\n  moveInitEntryDown,\n  moveInitEntryUp,\n  getInitItems,\n  // eslint-disable-next-line\n  useInitEntryListEvents,\n  // eslint-disable-next-line\n  useInitEntryEvents\n}\n\n/* Combat State */\n\nlet combatState = NotStarted;\nconst { fire: fireCombatStateEvents, useEvents: useCombatStateEvents } = defineEvent(() => combatState);\n\n/**\n * Start or restart combat.\n */\nfunction startCombat() {\n  if (initiativeItems.length === 0) {\n    return;\n  }\n  combatState = new CurrentCombatState(1, 0);\n  const firstInit = initIndexToEntry(0);\n  firstInit.entry = firstInit.entry.updateActive(true);\n  fireCombatStateEvents();\n  firstInit.handlers.fire();\n}\n\n/* Initiative Items */\n\nlet nextInitId = 0;\nconst initiativeItems: number[] = [];\nconst initiativeItemLookup: { [id: number]: InitiativeInfo } = {};\nconst { fire: fireInitEntryEvents, useEvents: useInitEntryListEvents } = defineEvent(getInitItems);\n\nfunction useInitEntryEvents(id: number, handler: Handler<InitiativeEntry>) {\n  return initiativeItemLookup[id].handlers.useEvents(handler);\n}\n\nfunction getInitItems(): InitiativeEntry[] {\n  return initiativeItems.map(x => initiativeItemLookup[x].entry);\n}\n\nfunction initIndexToEntry(i: number): InitiativeInfo {\n  return initiativeItemLookup[initiativeItems[i]];\n}\n\nfunction addInitEntry(name: string, init: number) {\n  let itemIndex = findAddIndex(init);\n  addInitAtIndex(name, init, itemIndex);\n}\n\nfunction addInitAtIndex(name: string, init: number, itemIndex: number) {\n  const id = nextInitId++;\n  let item = new InitiativeEntry(name, init, id, false, false, false)\n  initiativeItems.splice(itemIndex, 0, item.id);\n\n\n  initiativeItemLookup[item.id] = {\n    entry: item,\n    handlers: defineEvent(() => initiativeItemLookup[item.id].entry)\n  };\n\n  // If we added an item above the current item in combat, move the activeItem down one.\n  if (combatState instanceof CurrentCombatState && combatState.activeItem >= itemIndex) {\n    combatState = new CurrentCombatState(combatState.round, combatState.activeItem + 1)\n    fireCombatStateEvents();\n  }\n  \n  updateSurroundingMovement(itemIndex);\n  fireInitEntryEvents();\n}\n\n/**\n * Determines the correct index to insert a new initiative item with the given\n * initiative. The new item will be inserted below any other items at the same\n * initiative.\n * @param init The initiative value being added.\n */\nfunction findAddIndex(init: number): number {\n  for (var i = 0; i < initiativeItems.length; i++) {\n    if (initIndexToEntry(i).entry.init < init) {\n      return i;\n    }\n  }\n\n  return initiativeItems.length;\n}\n\n/**\n * Duplicates an initiative entry a given number of times, updating the names\n * to indicate that they are duplicates.\n * @param item The item to duplicate.\n * @param times The number of times to duplicate the item.\n */\nfunction duplicateInitEntry(item: InitiativeEntry, times: number) {\n  const index = initiativeItems.findIndex(x => x === item.id)\n  const info = initiativeItemLookup[initiativeItems[index]];\n  for (let i = 0; i < times; i++) {\n    let name = info.entry.name + \" (\" + (i + 2) + \")\";\n    addInitAtIndex(name, info.entry.init, index + 1 + i);\n  }\n  info.entry = new InitiativeEntry(info.entry.name + \" (\" + 1 + \")\",\n    info.entry.init, info.entry.id, info.entry.active, info.entry.canMoveDown, info.entry.canMoveUp);\n  info.handlers.fire();\n}\n\nfunction removeInitEntry(entry: InitiativeEntry) {\n  const index = initiativeItems.findIndex(x => x === entry.id);\n  if (index === -1) {\n    throw new Error(\"Tried to remove initiative entry that doesn't exist. ID:\" + entry.id);\n  }\n  initiativeItems.splice(index, 1);\n  delete initiativeItemLookup[entry.id];\n  fireInitEntryEvents();\n  updateSurroundingMovement(Math.min(index, initiativeItems.length - 1));\n\n  // Handle the effect of the change on the current combat.\n  if (combatState instanceof CurrentCombatState) {\n    if (initiativeItems.length === 0) {\n      // Last init? End combat.\n      combatState = NotStarted;\n    } else if (index >= combatState.activeItem) {\n      // The active index has to be updated.\n      const newActiveIndex = Math.max(0, combatState.activeItem - 1);\n      combatState = new CurrentCombatState(combatState.round, newActiveIndex);\n\n      // And the actual active item if we removed the current selection.\n      if (entry.active) {\n        const newActiveItem = initIndexToEntry(newActiveIndex);\n        updateActive(newActiveItem, true)\n        newActiveItem.handlers.fire();\n      }\n    }\n    fireCombatStateEvents();\n  }\n}\n\nfunction moveInitEntryDown(entry: InitiativeEntry) {\n  const index = initiativeItems.findIndex(x => x === entry.id);\n  if (index === -1) {\n    throw new Error(\"Tried to move initiative entry that doesn't exist. ID:\" + entry.id);\n  }\n\n  // The last item can't be moved down.\n  if (index === initiativeItems.length - 1) {\n    return;\n  }\n\n  swapInits(index, index + 1);\n}\n\nfunction moveInitEntryUp(entry: InitiativeEntry) {\n  const index = initiativeItems.findIndex(x => x === entry.id);\n  if (index === -1) {\n    throw new Error(\"Tried to move initiative entry that doesn't exist. ID:\" + entry.id);\n  }\n\n  // The fist item can't be moved down.\n  if (index === 0) {\n    return;\n  }\n\n  swapInits(index, index - 1);\n}\n\n/**\n * Swaps the position of two items in initiative order. If one of the items\n * is the active item.\n * @param index1 The first index being swapped.\n * @param index2 The second index being swapped.\n */\nfunction swapInits(index1: number, index2: number) {\n  var originalEntry = initiativeItems[index1];\n  initiativeItems[index1] = initiativeItems[index2];\n  initiativeItems[index2] = originalEntry;\n\n  const firstEvent = updateMovementForIndex(index1);\n  const secondEvent = updateMovementForIndex(index2);\n\n  if (combatState instanceof CurrentCombatState) {\n    if (index1 === combatState.activeItem) {\n      combatState = new CurrentCombatState(combatState.round, index2);\n      fireCombatStateEvents();\n    } else if (index2 === combatState.activeItem) {\n      combatState = new CurrentCombatState(combatState.round, index1);\n      fireCombatStateEvents();\n    }\n  }\n  fireInitEntryEvents();\n  firstEvent();\n  secondEvent();\n}\n\nfunction updateMovementForIndex(index: number): (() => void) {\n  const entry = initIndexToEntry(index);\n  entry.entry = entry.entry.updateMovement(index, initiativeItems.length);\n  return entry.handlers.fire;\n}\n\n/**\n * Updates the movement state for the given index and surrounding indices.\n * @param index The index to update around.\n */\nfunction updateSurroundingMovement(index: number) {\n  if (index >= initiativeItems.length || index < 0) {\n    return;\n  }\n\n  updateMovementForIndex(index)();\n  if (index > 0) {\n    updateMovementForIndex(index - 1)();\n  }\n  if (index < initiativeItems.length - 1) {\n    updateMovementForIndex(index + 1)();\n  }\n}\n\nfunction nextInit() {\n  if (!(combatState instanceof CurrentCombatState)) {\n    return;\n  }\n  const lastItem = initiativeItemLookup[initiativeItems[combatState.activeItem]];\n  combatState = combatState.next(initiativeItems.length);\n  const nextItem = initiativeItemLookup[initiativeItems[combatState.activeItem]];\n\n  updateActive(lastItem, false);\n  updateActive(nextItem, true);\n\n  fireCombatStateEvents();\n  lastItem.handlers.fire();\n  nextItem.handlers.fire();\n}\n\nfunction updateActive(info: InitiativeInfo, isActive: boolean) {\n  initiativeItemLookup[info.entry.id].entry = info.entry.updateActive(isActive);\n}\n","/**\n * A single previously definined initiative item, and the groups it belongs to.\n */\nexport class HistoryEntry {\n\n    groups: Set<string>;\n\n    constructor(readonly name: string) {\n        this.groups = new Set();\n    }\n}\n\n/**\n * A sorting comparator, using the names of history entries.\n */\nexport function defaultHistoryEntrySort(a: HistoryEntry, b: HistoryEntry): number {\n    return a.name.localeCompare(b.name);\n}","import { defineEvent, EventDefinition, Handler } from \"../Core/EventHandlers\";\nimport { HistoryEntry } from \"./HistoryEntries\";\n\n/**\n * This module provides the interface for Quick Initiative to manage saved\n * initiative items. Items are uniquely identified by their name, as they don't\n * really have any other identity.\n */\n\nconst {\n    fire: fireHistoryEntryListEvents,\n    useEvents: useHistoryItemListEvents,\n} = defineEvent(getHistoryItems);\n\nexport {\n    useHistoryItemListEvents,\n    useHistoryItemEvents,\n    getHistoryItems,\n    addHistoryItem,\n    addHistoryItemToGroup,\n    removeHistoryItem,\n    removeHistoryItemFromGroup,\n    renameGroup,\n    saveToLocalStorage\n}\n\n// In-application representation of history items.\n// Each value has the item itself and the event definition for that item.\nconst historyItems: Map<string, { entry: HistoryEntry, handlers: EventDefinition<HistoryEntry> }> = new Map();\n\nfunction getHistoryItems(): HistoryEntry[] {\n    return Array.from(historyItems.values(), x => x.entry);\n}\n\n/**\n * \n * @param name The name of the item to register with for updates.\n * @param handler The update handler.\n */\nfunction useHistoryItemEvents(name: string, handler: Handler<HistoryEntry>): HistoryEntry {\n    var item = historyItems.get(name);\n    if (!item) {\n        throw new Error(\"Tried to get events for non-existant entry.\");\n    }\n    return item.handlers.useEvents(handler);\n}\n\n/**\n * Adds a new history item, if it doesn't exist.\n * @param name The name of the new item.\n * @param groups The groups to add the item to initially.\n * @returns true, if and only if a new item was added.\n */\nfunction addHistoryItem(name: string, groups: string[]): boolean {\n    if (historyItems.has(name)) {\n        return false;\n    }\n\n    const entry = new HistoryEntry(name);\n    groups.forEach(group => {\n        entry.groups.add(group);\n    });\n\n    historyItems.set(name,\n        {\n            entry: entry,\n            handlers: defineEvent(() => {\n                var item = historyItems.get(name);\n                if (item) {\n                    return item.entry;\n                }\n                throw new Error(\"Missing history item.\");\n            })\n        });\n    fireHistoryEntryListEvents();\n    return true;\n}\n\nfunction removeHistoryItem(item: HistoryEntry) {\n    if(historyItems.delete(item.name)) {\n        fireHistoryEntryListEvents();\n    }\n}\n\nfunction addHistoryItemToGroup(item: HistoryEntry, group: string) {\n    const entry = historyItems.get(item.name);\n    if(!entry) {\n        throw new Error(\"Missing history item.\")\n    }\n\n    entry.entry.groups.add(group);\n    entry.handlers.fire();\n    fireHistoryEntryListEvents();\n}\n\nfunction removeHistoryItemFromGroup(item: HistoryEntry, group: string) {\n    const entry = historyItems.get(item.name);\n    if(!entry) {\n        throw new Error(\"Missing history item.\")\n    }\n\n    if(entry.entry.groups.delete(group)) {\n        entry.handlers.fire();\n        fireHistoryEntryListEvents();\n    }\n}\n\nfunction renameGroup(oldName: string, newName: string) {\n    historyItems.forEach(item => {\n        if(item.entry.groups.delete(oldName)) {\n            item.entry.groups.add(newName);\n            item.handlers.fire();\n        }\n    });\n    fireHistoryEntryListEvents();\n}\n\nfunction saveToLocalStorage() {\n    localStorage.setItem(\"historyItems\",\n        JSON.stringify(getHistoryItems().map((x: HistoryEntry): object =>\n            ({ name: x.name, groups: Array.from(x.groups).filter(x => x.length > 0)}))));\n}\n\n// History items are loaded on module load.\nconst storedItems = localStorage.getItem(\"historyItems\");\nif (storedItems) {\n    const storedJson = JSON.parse(storedItems);\n    storedJson.forEach((element: any) => {\n        addHistoryItem(element.name, element.groups);\n    });\n}","import React from 'react';\nimport { withStyles, ListItem, ListItemText, ListItemSecondaryAction, IconButton } from '@material-ui/core';\nimport { HistoryEntry } from '../Model/HistoryEntries';\nimport InitSelector from './InitSelector';\nimport * as InitModel from '../Model/InitModel';\nimport * as HistoryModel from '../Model/HistoryModel';\nimport { Delete } from '@material-ui/icons';\n\nconst styles = (theme: any) => ({\n    input: {\n        margin: theme.spacing(1),\n    }\n});\n\nfunction HistoryItem(props: { classes: any, item: HistoryEntry, showInit: boolean }) {\n    const item = HistoryModel.useHistoryItemEvents(props.item.name, () => { });\n\n    const handleInitSelected = (init: number) => {\n        InitModel.addInitEntry(item.name, init);\n    }\n\n    const handleClick = () => {\n        if(item.groups.has(\"\") && !props.showInit) {\n            HistoryModel.removeHistoryItemFromGroup(item, \"\");\n        } else {\n            HistoryModel.addHistoryItemToGroup(item, \"\");\n        }\n    }\n\n    return (\n        <ListItem dense button onClick={handleClick}>\n            <ListItemText primary={item.name} />\n            {\n                props.showInit ? \n                    <ListItemSecondaryAction>\n                        <IconButton onClick={() => HistoryModel.removeHistoryItem(item)}>\n                            <Delete />\n                        </IconButton>\n                        <InitSelector disabled={false} onSelected={handleInitSelected} />\n                    </ListItemSecondaryAction>\n                : \n                    <></>\n            }\n        </ListItem>\n    )\n}\n\nexport default withStyles(styles)(HistoryItem);","\n/**\n * Check whether a given string is null or is only spaces.\n * @param str The string to check.\n */\nexport function isNullOrEmpty(str: string | null) {\n    return str === null || str.match(/^ *$/) !== null;\n}","import React, { useRef, useState } from 'react';\nimport { withStyles, ListItem, ListItemText, ListItemSecondaryAction, Input, IconButton } from '@material-ui/core';\nimport * as HistoryModel from '../Model/HistoryModel';\nimport { isNullOrEmpty } from '../Core/StringUtils';\nimport { LibraryAdd } from '@material-ui/icons';\n\nconst styles = (theme: any) => ({\n    input: {\n        margin: theme.spacing(1),\n    }\n});\n\nfunction GroupCreator(props: { classes: any }) {\n    const { classes } = props;\n\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [isCreateGroupButtonDisabled, setSelectorDisabled] = useState(true);\n    const [nameText, setNameText] = useState(\"\");\n\n    const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setSelectorDisabled(isNullOrEmpty(event.currentTarget.value));\n        setNameText(event.currentTarget.value);\n    };\n\n    const createGroup = () => {\n        HistoryModel.renameGroup(\"\", nameText);\n    }\n    \n    return (\n        <ListItem>\n            <ListItemText>\n                <Input\n                    inputRef={inputEl}\n                    placeholder=\"Group Name\"\n                    onChange={handleTextChange}\n                    inputProps={{\n                        'aria-label': 'Group Name',\n                    }} />\n            </ListItemText>\n            <ListItemSecondaryAction>\n                <IconButton className={classes.input} \n                            disabled={isCreateGroupButtonDisabled} onClick={createGroup}>\n                    <LibraryAdd />\n                </IconButton>\n            </ListItemSecondaryAction>\n        </ListItem>\n    )\n}\n\nexport default withStyles(styles)(GroupCreator);","import React, { useState, useRef, useMemo } from 'react';\nimport { Input, withStyles, List, ListItem, ListItemText, ListItemSecondaryAction, ListSubheader, Divider } from \"@material-ui/core\";\nimport InitSelector from \"./InitSelector\";\nimport * as InitModel from '../Model/InitModel';\nimport * as HistoryModel from '../Model/HistoryModel';\nimport { defaultHistoryEntrySort, HistoryEntry } from '../Model/HistoryEntries';\nimport HistoryItem from './HistoryItem';\nimport GroupCreator from './GroupCreator';\nimport { isNullOrEmpty } from '../Core/StringUtils';\n\nconst styles = () => ({\n    input: {\n    },\n    historyList: {\n        overflow: 'scroll',\n        height: 'calc(100% - 70px)'\n    },\n    filteringBar: {\n        overflow: 'hidden'\n    }\n});\n\n/**\n * Checks if an entry's name or groups contains a given string, using\n * case-insensitive comparison.\n * @param item The item to check.\n * @param filterText The text to match.\n */\nfunction entryHasText(item: HistoryEntry, filterText: string): boolean {\n    if(item.name.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())) {\n        return true;\n    }\n\n    let hasText = false;\n    item.groups.forEach(x => {\n        if(x.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())) {\n            hasText = true;\n        }\n    });\n\n    return hasText;\n}\n\nfunction FilteringPanel(props: { classes: any }) {\n    const { classes } = props;\n\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [isSelectorDisabled, setSelectorDisabled] = useState(true);\n    const [filterText, setFilterText] = useState(\"\");\n\n    const historyList = HistoryModel.useHistoryItemListEvents(HistoryModel.saveToLocalStorage);\n\n    const filteredList = useMemo(\n        () => historyList.filter(x => entryHasText(x, filterText)).sort(defaultHistoryEntrySort),\n        [historyList, filterText]);\n\n    // The group for entries about to be added to a named group.\n    const pendingGroup = historyList.filter(x => x.groups.has(\"\"));\n\n    // The group for entries in no particular group.\n    const others = filteredList.filter(x => x.groups.size === 0);\n\n    // Set up the real groups.\n    const groups = new Map<string, HistoryEntry[]>();\n    for(const item of filteredList) {\n        item.groups.forEach(group => {\n            if(isNullOrEmpty(group)) {\n                return;\n            }\n\n            const toAdd = groups.get(group) as HistoryEntry[];\n            if (toAdd === undefined) {\n                groups.set(group, [item]);\n            } else {\n                toAdd.push(item);\n            }\n        });\n    }\n\n    const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setSelectorDisabled(isNullOrEmpty(event.currentTarget.value));\n        setFilterText(event.currentTarget.value);\n    };\n\n    const handleInitSelected = (init: number) => {\n        if (inputEl.current == null) {\n            return;\n        }\n        InitModel.addInitEntry(inputEl.current.value, init)\n        HistoryModel.addHistoryItem(inputEl.current.value, [\"\"]);\n        inputEl.current.value = \"\";\n        setSelectorDisabled(true);\n        setFilterText(\"\");\n    };\n\n    return (\n        <div className={classes.filteringBar}>\n            <List>\n                <ListItem>\n                    <ListItemText>\n                        <Input\n                            inputRef={inputEl}\n                            placeholder=\"Name\"\n                            onChange={handleTextChange}\n                            className={classes.input}\n                            inputProps={{\n                                'aria-label': 'Name',\n                            }} />\n                    </ListItemText>\n                    <ListItemSecondaryAction>\n                        <InitSelector disabled={isSelectorDisabled} onSelected={handleInitSelected} />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </List>\n            <Divider />\n            {\n                pendingGroup.length > 0 ? (\n                    <List>\n                        <GroupCreator ></GroupCreator>  \n                        {pendingGroup.map(\n                            x => <HistoryItem key={x.name} item={x} showInit={false} />)\n                        }\n                        <Divider />\n                    </List>\n                ) :\n                    <></>\n            }\n            <div className={classes.historyList}>\n                {\n                    Array.from(groups).sort((a,b)=> a[0].localeCompare(b[0])).map(entry => \n                        <List>\n                            <ListSubheader disableSticky={true}>{entry[0]}</ListSubheader>\n                            {(entry[1] as HistoryEntry[]).map(\n                                x => <HistoryItem key={x.name} item={x} showInit={true} />)\n                            }\n                        </List>)\n                }\n                {\n                    others.length > 0 ? (\n                        <List>\n                            <ListSubheader disableSticky={true}>Others</ListSubheader>\n                            {others.map(x => <HistoryItem key={x.name} item={x} showInit={true} />)}\n                        </List>\n                    ) :\n                        <></>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default withStyles(styles)(FilteringPanel);","import React from \"react\";\nimport * as InitModel from \"../Model/InitModel\";\nimport { CurrentCombatState } from \"../Model/CombatState\";\nimport { withStyles, Typography } from \"@material-ui/core\";\n\nconst styles = (theme: any) => ({\n    label: {\n      margin: theme.spacing(1),\n    }\n  });\n\nfunction CombatStatusBar(props: any) {\n    const { classes } = props;\n\n    const combatState = InitModel.useCombatStateEvents(() => {});\n\n    if (combatState instanceof CurrentCombatState) {\n        return (\n            <Typography variant=\"body2\" color=\"inherit\" noWrap className={classes.label}>\n            Round {combatState.round}\n            </Typography>\n        );\n    } \n    \n    return <></>;\n\n}\n\nexport default withStyles(styles)(CombatStatusBar);","import React, { useState } from \"react\";\nimport { TableRow, TableCell, withStyles, IconButton, Menu, MenuItem, Typography, ButtonGroup, Button, Grid } from \"@material-ui/core\";\nimport { InitiativeEntry } from \"../Model/InitiativeEntries\";\nimport * as InitModel from \"../Model/InitModel\";\nimport { Delete, ArrowUpward, FileCopy, ArrowDownward } from \"@material-ui/icons\";\n\ntype MouseEvt = React.MouseEvent<HTMLElement, MouseEvent>;\n\nconst styles = (theme: any) => ({\n    initCell: {\n        width: 'auto',\n        align: 'right',\n        padding: 'checkbox'\n    },\n    titleCell: {\n        width: '100%'\n    },\n    actionCell: {\n        width: 'auto'\n    },\n    hpControls: {\n        marginRight: theme.spacing(2),\n        alignSelf: 'center'\n    }\n});\n\nconst duplicates = [2, 3, 4, 5];\n\nfunction InitRow(props: { classes: any, item: InitiativeEntry }) {\n    const { classes } = props;\n    const [hp, setHp] = useState(0);\n    const item = InitModel.useInitEntryEvents(props.item.id, () => {});\n    const [anchor, setAnchor] = useState<HTMLElement | null>(null);\n\n    const handleClickButton = (event: MouseEvt) => {\n        setAnchor(event.currentTarget);\n    };\n\n    const handleMenuItemClick = (event: MouseEvt, index: number) => {\n        setAnchor(null);\n        InitModel.duplicateInitEntry(item, duplicates[index]-1);\n    };\n\n    const handleClose = () => {\n        setAnchor(null);\n    };\n\n\n    return (\n        <TableRow selected={item.active}>\n            <TableCell className={classes.actionCell} padding=\"checkbox\">\n                <div style={{ display: 'flex' }}>\n                    <IconButton onClick={e => InitModel.moveInitEntryUp(item)} disabled={!item.canMoveUp}>\n                        <ArrowUpward />\n                    </IconButton>\n                    <IconButton onClick={e => InitModel.moveInitEntryDown(item)} disabled={!item.canMoveDown}>\n                        <ArrowDownward />\n                    </IconButton>\n                </div>\n            </TableCell>\n            <TableCell className={classes.initCell}>{item.init}</TableCell>\n            <TableCell className={classes.titleCell}>\n                <Typography variant=\"subtitle1\">{item.name}</Typography>\n            </TableCell>\n            <TableCell className={classes.actionCell} padding=\"checkbox\">\n                <div style={{ display: 'flex' }}>\n                    <Grid item \n                          alignItems='center'\n                          style={{ alignSelf: 'center'}}>\n                        <ButtonGroup color=\"primary\" variant='outlined' size='small'>\n                            <Button onClick={() => setHp(hp - 5)}>-5</Button>\n                            <Button onClick={() => setHp(hp - 1)}>-1</Button>\n                        </ButtonGroup>\n                    </Grid>\n                    <Grid item\n                          alignItems='center' \n                          style={{ alignSelf: 'center'}}>                        \n                        <Typography align='center' style={{width: 50}}>{hp}</Typography>\n                    </Grid>\n                    <Grid item\n                          alignItems='center' \n                          className={classes.hpControls}>\n                        <ButtonGroup color=\"primary\" variant='outlined' size='small'>\n                            <Button onClick={() => setHp(hp + 1)}>+1</Button>\n                            <Button onClick={() => setHp(hp + 5)}>+5</Button>\n                        </ButtonGroup>\n                    </Grid>\n                    <span>\n                        <IconButton\n                            onClick={handleClickButton}\n                            className={classes.button}\n                            aria-label=\"Duplicate Entry\"\n                        >\n                            <FileCopy />\n                        </IconButton>\n                        <Menu\n                            anchorEl={anchor}\n                            open={Boolean(anchor)}\n                            onClose={handleClose}\n                        >\n                            {duplicates.map((option, index) => (\n                                <MenuItem\n                                    dense={true}\n                                    key={option}\n                                    onClick={event => handleMenuItemClick(event, index)}\n                                >\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Menu>\n                    </span>\n                    <IconButton onClick={e => InitModel.removeInitEntry(item)}>\n                        <Delete />\n                    </IconButton>\n                </div>\n            </TableCell>\n        </TableRow>\n    );\n}\n\nexport default withStyles(styles)(InitRow);","import React from \"react\";\nimport { withStyles, Table, TableBody } from \"@material-ui/core\";\nimport * as InitModel from \"../Model/InitModel\";\nimport InitRow from \"./InitRow\";\n\nconst styles = (theme: any) => ({\n    root: {\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n    },\n    initCell: {\n        width: '50px',\n        align: 'right'\n    }\n});\n\nfunction InitList(props: any) {\n    const { classes } = props;\n    const initItems = InitModel.useInitEntryListEvents(() => {});\n\n    return (\n        <div className={classes.root}>\n            <Table>\n                <TableBody>\n                    {initItems.map((item) =>\n                        (<InitRow\n                            item={item}\n                            key={item.id}/>\n                        ))}\n                </TableBody>\n            </Table>\n        </div>\n    );\n}\n\nexport default withStyles(styles)(InitList);","import React from \"react\";\nimport * as InitModel from \"../Model/InitModel\";\nimport { CurrentCombatState } from \"../Model/CombatState\";\nimport { withStyles, Fab } from \"@material-ui/core\";\nimport { PlayArrowOutlined, DeleteSweep } from \"@material-ui/icons\";\n\nconst styles = (theme: any) => ({\n    fabBox: {\n        position: 'absolute' as 'absolute',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2)\n    },\n    fab: {\n        marginLeft: theme.spacing(2)\n      }\n  });\n\nfunction NextInitButton(props: any) { \n    const { classes } = props;\n    const combatState = InitModel.useCombatStateEvents(() => {});\n    const initItems = InitModel.useInitEntryListEvents(() => {});\n    const noInitItems = initItems.length === 0;\n    \n    return (\n        <div className={classes.fabBox}>\n            <Fab className={classes.fab}\n                color='secondary'\n                disabled={noInitItems}\n                onClick={() => initItems.forEach(x => InitModel.removeInitEntry(x))}>\n                <DeleteSweep />\n            </Fab>\n            <Fab className={classes.fab} \n                color='primary'\n                disabled={noInitItems}\n                onClick={() => combatState instanceof CurrentCombatState ? \n                                    InitModel.nextInit() : \n                                    InitModel.startCombat()}>\n                <PlayArrowOutlined />\n            </Fab>\n        </div>\n    );\n    \n\n}\n\nexport default withStyles(styles)(NextInitButton);","import React from \"react\";\nimport { withStyles } from \"@material-ui/core\";\nimport { SpeedDial, SpeedDialIcon, SpeedDialAction } from \"@material-ui/lab\";\nimport { Home, InfoOutlined, Code } from \"@material-ui/icons\";\n\nconst styles = (theme: any) => ({\n    speedDial: {\n        position: 'absolute' as 'absolute',\n        top: theme.spacing(0.5),\n        right: theme.spacing(0.5),\n      }\n});\n\nconst actions = [\n    { icon: <Home />, \n      name: 'To www.jmreardon.com', \n      url: \"https://www.jmreardon.com/projects/quick_initiative/\"\n    },\n    { icon: <Code />, \n      name: 'Get the Code', \n      url: \"https://github.com/reardonj/quick-initiative\"\n    }\n  ];\n\nfunction InfoDropdown(props: any) {\n    const { classes } = props;\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => setOpen(prevOpen => !prevOpen);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n\n    return (\n        <div className={classes.root}>\n        <SpeedDial\n            ariaLabel=\"SpeedDial openIcon example\"\n            className={classes.speedDial}\n            icon={<SpeedDialIcon icon={<InfoOutlined />} openIcon={<InfoOutlined />} />}\n            onBlur={handleClose}\n            onClick={handleClick}\n            onClose={handleClose}\n            onFocus={handleOpen}\n            onMouseEnter={handleOpen}\n            onMouseLeave={handleClose}\n            open={open}\n            direction='down'\n        >\n            {actions.map(action => (\n            <SpeedDialAction\n                key={action.name}\n                icon={action.icon}\n                tooltipTitle={action.name}\n                onClick={() => {\n                    handleClick();\n                    window.open(action.url, '_blank');\n                }}\n            />\n            ))}\n        </SpeedDial>\n        </div>\n    );\n}\n\nexport default withStyles(styles)(InfoDropdown);","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport { IconButton, Hidden, Divider } from '@material-ui/core';\nimport { Menu } from '@material-ui/icons';\n\nimport FilteringPanel from './FilteringPanel';\nimport CombatStatusBar from './CombatStatusBar';\nimport InitList from './InitList';\nimport NextInitButton from './NextInitButton';\nimport InfoDropdown from './InfoDropdown';\n\nconst drawerWidth = 300;\n\nconst styles = (theme: any) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawer: {\n    [theme.breakpoints.up('md')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  toolbar: theme.mixins.toolbar,\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nfunction MainView(props: any) {\n  const { classes } = props;\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  \n  function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  }\n\n  const drawer = <>\n      <div className={classes.toolbar} />\n      <Divider />\n      <FilteringPanel /> \n    </>\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Quick Initiative\n          </Typography>\n          <CombatStatusBar />\n          <div className={classes.grow} />\n          <InfoDropdown />\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"initiative entry history\">\n        <Hidden mdUp implementation=\"css\">\n          <Drawer\n            variant=\"temporary\"\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden smDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <InitList />\n      </main>\n      <NextInitButton />\n    </div>\n  );\n}\n\nexport default withStyles(styles)(MainView);","import React from 'react';\nimport MainView from './Components/MainView';\n\nfunction App(props: any) {\n\n  return <MainView></MainView>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}